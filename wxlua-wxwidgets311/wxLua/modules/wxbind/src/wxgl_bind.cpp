// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxgl_gl.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include "wxlua/wxlstate.h"
#include "wxbind/include/wxgl_bind.h"

#ifdef __GNUC__
    #pragma GCC diagnostic ignored "-Wunused-variable"
#endif // __GNUC__


#if wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS
// ---------------------------------------------------------------------------
// Bind class wxGLCanvas
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGLCanvas'
int wxluatype_wxGLCanvas = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGLCanvas_SetColour[] = { &wxluatype_wxGLCanvas, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGLCanvas_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_SetColour[1] = {{ wxLua_wxGLCanvas_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGLCanvas_SetColour }};
//     void SetColour(const wxString& colour );
static int LUACALL wxLua_wxGLCanvas_SetColour(lua_State *L)
{
    // const wxString colour
    const wxString colour = wxlua_getwxStringtype(L, 2);
    // get this
    wxGLCanvas * self = (wxGLCanvas *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLCanvas);
    // call SetColour
    self->SetColour(colour);

    return 0;
}


#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent1[] = { &wxluatype_wxGLCanvas, &wxluatype_wxGLContext, NULL };
static int LUACALL wxLua_wxGLCanvas_SetCurrent1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_SetCurrent1[1] = {{ wxLua_wxGLCanvas_SetCurrent1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent1 }};
//     !%mac void SetCurrent(const wxGLContext& RC) const;
static int LUACALL wxLua_wxGLCanvas_SetCurrent1(lua_State *L)
{
    // const wxGLContext RC
    const wxGLContext * RC = (const wxGLContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGLContext);
    // get this
    wxGLCanvas * self = (wxGLCanvas *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLCanvas);
    // call SetCurrent
    self->SetCurrent(*RC);

    return 0;
}

#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)

#if (defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent[] = { &wxluatype_wxGLCanvas, NULL };
static int LUACALL wxLua_wxGLCanvas_SetCurrent(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_SetCurrent[1] = {{ wxLua_wxGLCanvas_SetCurrent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent }};
//     %mac void SetCurrent( );
static int LUACALL wxLua_wxGLCanvas_SetCurrent(lua_State *L)
{
    // get this
    wxGLCanvas * self = (wxGLCanvas *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLCanvas);
    // call SetCurrent
    self->SetCurrent();

    return 0;
}

#endif // (defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGLCanvas_SwapBuffers[] = { &wxluatype_wxGLCanvas, NULL };
static int LUACALL wxLua_wxGLCanvas_SwapBuffers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_SwapBuffers[1] = {{ wxLua_wxGLCanvas_SwapBuffers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGLCanvas_SwapBuffers }};
//     void SwapBuffers( );
static int LUACALL wxLua_wxGLCanvas_SwapBuffers(lua_State *L)
{
    // get this
    wxGLCanvas * self = (wxGLCanvas *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLCanvas);
    // call SwapBuffers
    self->SwapBuffers();

    return 0;
}


#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (((wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS) && (wxLUA_USE_wxPalette && wxUSE_PALETTE)) && (wxLUA_USE_wxPointSizeRect))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGLCanvas_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TTABLE, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TINTEGER, &wxluatype_TSTRING, &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxGLCanvas_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_constructor[1] = {{ wxLua_wxGLCanvas_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 8, s_wxluatypeArray_wxLua_wxGLCanvas_constructor }};
//     !%mac wxGLCanvas(wxWindow* parent, wxWindowID id = wxID_ANY, int attribList[] = 0, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style=0, const wxString& name="GLCanvas", const wxPalette& palette = wxNullPalette );
static int LUACALL wxLua_wxGLCanvas_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPalette palette = wxNullPalette
    const wxPalette * palette = (argCount >= 8 ? (const wxPalette *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPalette) : &wxNullPalette);
    // const wxString name = "GLCanvas"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("GLCanvas")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getintegertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // int attribList = 0
    int count = 0; wxLuaSmartIntArray  attribList = (argCount >= 3 ? wxlua_getintarray(L, 3, count) : 0);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxGLCanvas* returns = new wxGLCanvas(parent, id, attribList, *pos, *size, style, name, *palette);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGLCanvas);

    return 1;
}

#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (((wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS) && (wxLUA_USE_wxPalette && wxUSE_PALETTE)) && (wxLUA_USE_wxPointSizeRect))



#if (((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))||((defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLCanvas_SetCurrent_overload[] =
{

#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
    { wxLua_wxGLCanvas_SetCurrent1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent1 },
#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)

#if (defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
    { wxLua_wxGLCanvas_SetCurrent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGLCanvas_SetCurrent },
#endif // (defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
};
static int s_wxluafunc_wxLua_wxGLCanvas_SetCurrent_overload_count = sizeof(s_wxluafunc_wxLua_wxGLCanvas_SetCurrent_overload)/sizeof(wxLuaBindCFunc);

#endif // (((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))||((defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))

void wxLua_wxGLCanvas_delete_function(void** p)
{
    wxGLCanvas* o = (wxGLCanvas*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGLCanvas_methods[] = {
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGLCanvas_SetColour, 1, NULL },

#if (((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))||((defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))
    { "SetCurrent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGLCanvas_SetCurrent_overload, s_wxluafunc_wxLua_wxGLCanvas_SetCurrent_overload_count, 0 },
#endif // (((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))||((defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS))

    { "SwapBuffers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGLCanvas_SwapBuffers, 1, NULL },

#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (((wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS) && (wxLUA_USE_wxPalette && wxUSE_PALETTE)) && (wxLUA_USE_wxPointSizeRect))
    { "wxGLCanvas", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGLCanvas_constructor, 1, NULL },
#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (((wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS) && (wxLUA_USE_wxPalette && wxUSE_PALETTE)) && (wxLUA_USE_wxPointSizeRect))

    { 0, 0, 0, 0 },
};

int wxGLCanvas_methodCount = sizeof(wxGLCanvas_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS


#if wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS
// ---------------------------------------------------------------------------
// Bind class wxGLContext
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGLContext'
int wxluatype_wxGLContext = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGLContext_SetCurrent[] = { &wxluatype_wxGLContext, &wxluatype_wxGLCanvas, NULL };
static int LUACALL wxLua_wxGLContext_SetCurrent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLContext_SetCurrent[1] = {{ wxLua_wxGLContext_SetCurrent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGLContext_SetCurrent }};
//     void SetCurrent(const wxGLCanvas& win) const;
static int LUACALL wxLua_wxGLContext_SetCurrent(lua_State *L)
{
    // const wxGLCanvas win
    const wxGLCanvas * win = (const wxGLCanvas *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGLCanvas);
    // get this
    wxGLContext * self = (wxGLContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLContext);
    // call SetCurrent
    self->SetCurrent(*win);

    return 0;
}


#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGLContext_constructor[] = { &wxluatype_wxGLCanvas, &wxluatype_wxGLContext, NULL };
static int LUACALL wxLua_wxGLContext_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGLContext_constructor[1] = {{ wxLua_wxGLContext_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxGLContext_constructor }};
//     !%mac wxGLContext(wxGLCanvas *win, const wxGLContext* other = NULL ); // FIXME
static int LUACALL wxLua_wxGLContext_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxGLContext other = NULL
    const wxGLContext * other = (argCount >= 2 ? (const wxGLContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGLContext) : NULL);
    // wxGLCanvas win
    wxGLCanvas * win = (wxGLCanvas *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGLCanvas);
    // call constructor
    wxGLContext* returns = new wxGLContext(win, other);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGLContext);

    return 1;
}

#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)



void wxLua_wxGLContext_delete_function(void** p)
{
    wxGLContext* o = (wxGLContext*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGLContext_methods[] = {
    { "SetCurrent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGLContext_SetCurrent, 1, NULL },

#if ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)
    { "wxGLContext", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGLContext_constructor, 1, NULL },
#endif // ((!defined(__WXMAC__)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)) && (wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS)

    { 0, 0, 0, 0 },
};

int wxGLContext_methodCount = sizeof(wxGLContext_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxgl_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxgl() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxgl(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {

        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxgl() is called to register #define and enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxgl(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS
        { "WX_GL_AUX_BUFFERS", WX_GL_AUX_BUFFERS },
        { "WX_GL_BUFFER_SIZE", WX_GL_BUFFER_SIZE },
        { "WX_GL_DEPTH_SIZE", WX_GL_DEPTH_SIZE },
        { "WX_GL_DOUBLEBUFFER", WX_GL_DOUBLEBUFFER },
        { "WX_GL_LEVEL", WX_GL_LEVEL },
        { "WX_GL_MIN_ACCUM_ALPHA", WX_GL_MIN_ACCUM_ALPHA },
        { "WX_GL_MIN_ACCUM_BLUE", WX_GL_MIN_ACCUM_BLUE },
        { "WX_GL_MIN_ACCUM_GREEN", WX_GL_MIN_ACCUM_GREEN },
        { "WX_GL_MIN_ACCUM_RED", WX_GL_MIN_ACCUM_RED },
        { "WX_GL_MIN_ALPHA", WX_GL_MIN_ALPHA },
        { "WX_GL_MIN_BLUE", WX_GL_MIN_BLUE },
        { "WX_GL_MIN_GREEN", WX_GL_MIN_GREEN },
        { "WX_GL_MIN_RED", WX_GL_MIN_RED },
        { "WX_GL_RGBA", WX_GL_RGBA },
        { "WX_GL_STENCIL_SIZE", WX_GL_STENCIL_SIZE },
        { "WX_GL_STEREO", WX_GL_STEREO },
#endif // wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxgl() is called to register #define_string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxgl(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxgl() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxgl(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {

        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxgl() is called to register global functions
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxgl() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxgl(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {

        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxgl() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxGLCanvas = "wxGLCanvas";
static const char* wxluaclassname_wxGLContext = "wxGLContext";
static const char* wxluaclassname_wxObject = "wxObject";
static const char* wxluaclassname_wxWindow = "wxWindow";

static const char* wxluabaseclassnames_wxGLCanvas[] = { wxluaclassname_wxWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGLCanvas[] = { NULL };
static const char* wxluabaseclassnames_wxGLContext[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGLContext[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS
    extern wxLuaBindMethod wxGLCanvas_methods[];
    extern int wxGLCanvas_methodCount;
    extern void wxLua_wxGLCanvas_delete_function(void** p);
    extern wxLuaBindMethod wxGLContext_methods[];
    extern int wxGLContext_methodCount;
    extern void wxLua_wxGLContext_delete_function(void** p);
#endif // wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS




wxLuaBindClass* wxLuaGetClassList_wxgl(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS
        { wxluaclassname_wxGLCanvas, wxGLCanvas_methods, wxGLCanvas_methodCount, CLASSINFO(wxGLCanvas), &wxluatype_wxGLCanvas, wxluabaseclassnames_wxGLCanvas, wxluabaseclassbinds_wxGLCanvas, NULL, NULL, NULL, 0, &wxLua_wxGLCanvas_delete_function, }, 
        { wxluaclassname_wxGLContext, wxGLContext_methods, wxGLContext_methodCount, CLASSINFO(wxGLContext), &wxluatype_wxGLContext, wxluabaseclassnames_wxGLContext, wxluabaseclassbinds_wxGLContext, NULL, NULL, NULL, 0, &wxLua_wxGLContext_delete_function, }, 
#endif // wxLUA_USE_wxGLCanvas && wxUSE_GLCANVAS


        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxgl() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxgl, wxLuaBinding)

wxLuaBinding_wxgl::wxLuaBinding_wxgl() : wxLuaBinding()
{
    m_bindingName   = wxT("wxgl");
    m_nameSpace     = wxT("wx");
    m_classArray    = wxLuaGetClassList_wxgl(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxgl(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxgl(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxgl(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxgl(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxgl(m_functionCount);
    InitBinding();
}



// ---------------------------------------------------------------------------

wxLuaBinding* wxLuaBinding_wxgl_init()
{
    static wxLuaBinding_wxgl m_binding;

    if (wxLuaBinding::GetBindingArray().Index(&m_binding) == wxNOT_FOUND)
        wxLuaBinding::GetBindingArray().Add(&m_binding);

    return &m_binding;
}


