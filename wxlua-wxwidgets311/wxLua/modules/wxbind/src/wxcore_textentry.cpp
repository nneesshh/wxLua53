// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_textentry.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include "wxlua/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif

#ifdef __GNUC__
    #pragma GCC diagnostic ignored "-Wunused-variable"
#endif // __GNUC__

// ---------------------------------------------------------------------------
// Bind class wxTextEntryBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextEntryBase'
int wxluatype_wxTextEntryBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_AppendText[] = { &wxluatype_wxTextEntryBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryBase_AppendText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_AppendText[1] = {{ wxLua_wxTextEntryBase_AppendText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_AppendText }};
//     virtual void AppendText(const wxString& text);
static int LUACALL wxLua_wxTextEntryBase_AppendText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call AppendText
    self->AppendText(text);

    return 0;
}


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_AutoComplete[] = { &wxluatype_wxTextEntryBase, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxTextEntryBase_AutoComplete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_AutoComplete[1] = {{ wxLua_wxTextEntryBase_AutoComplete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_AutoComplete }};
//     bool AutoComplete(const wxArrayString& choices);
static int LUACALL wxLua_wxTextEntryBase_AutoComplete(lua_State *L)
{
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call AutoComplete
    bool returns = (self->AutoComplete(choices));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_AutoCompleteDirectories[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_AutoCompleteDirectories(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_AutoCompleteDirectories[1] = {{ wxLua_wxTextEntryBase_AutoCompleteDirectories, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_AutoCompleteDirectories }};
//     bool AutoCompleteDirectories();
static int LUACALL wxLua_wxTextEntryBase_AutoCompleteDirectories(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call AutoCompleteDirectories
    bool returns = (self->AutoCompleteDirectories());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_AutoCompleteFileNames[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_AutoCompleteFileNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_AutoCompleteFileNames[1] = {{ wxLua_wxTextEntryBase_AutoCompleteFileNames, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_AutoCompleteFileNames }};
//     bool AutoCompleteFileNames();
static int LUACALL wxLua_wxTextEntryBase_AutoCompleteFileNames(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call AutoCompleteFileNames
    bool returns = (self->AutoCompleteFileNames());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_CanCopy[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_CanCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_CanCopy[1] = {{ wxLua_wxTextEntryBase_CanCopy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_CanCopy }};
//     virtual bool CanCopy() const;
static int LUACALL wxLua_wxTextEntryBase_CanCopy(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call CanCopy
    bool returns = (self->CanCopy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_CanCut[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_CanCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_CanCut[1] = {{ wxLua_wxTextEntryBase_CanCut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_CanCut }};
//     virtual bool CanCut() const;
static int LUACALL wxLua_wxTextEntryBase_CanCut(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call CanCut
    bool returns = (self->CanCut());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_CanPaste[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_CanPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_CanPaste[1] = {{ wxLua_wxTextEntryBase_CanPaste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_CanPaste }};
//     virtual bool CanPaste() const;
static int LUACALL wxLua_wxTextEntryBase_CanPaste(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call CanPaste
    bool returns = (self->CanPaste());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_ChangeValue[] = { &wxluatype_wxTextEntryBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryBase_ChangeValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_ChangeValue[1] = {{ wxLua_wxTextEntryBase_ChangeValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_ChangeValue }};
//     virtual void ChangeValue(const wxString& value);
static int LUACALL wxLua_wxTextEntryBase_ChangeValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call ChangeValue
    self->ChangeValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_Clear[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_Clear[1] = {{ wxLua_wxTextEntryBase_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_Clear }};
//     virtual void Clear();
static int LUACALL wxLua_wxTextEntryBase_Clear(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_ConvertToUpperCase[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_ConvertToUpperCase(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_ConvertToUpperCase[1] = {{ wxLua_wxTextEntryBase_ConvertToUpperCase, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_ConvertToUpperCase }};
//     void ConvertToUpperCase();
static int LUACALL wxLua_wxTextEntryBase_ConvertToUpperCase(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call ConvertToUpperCase
    self->ConvertToUpperCase();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_ForceUpper[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_ForceUpper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_ForceUpper[1] = {{ wxLua_wxTextEntryBase_ForceUpper, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_ForceUpper }};
//     virtual void ForceUpper();
static int LUACALL wxLua_wxTextEntryBase_ForceUpper(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call ForceUpper
    self->ForceUpper();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents[] = { &wxluatype_wxTextEntryBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents[1] = {{ wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents }};
//     void ForwardEnableTextChangedEvents(bool enable);
static int LUACALL wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call ForwardEnableTextChangedEvents
    self->ForwardEnableTextChangedEvents(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_GetHint[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_GetHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_GetHint[1] = {{ wxLua_wxTextEntryBase_GetHint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_GetHint }};
//     virtual wxString GetHint() const;
static int LUACALL wxLua_wxTextEntryBase_GetHint(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call GetHint
    wxString returns = (self->GetHint());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_GetMargins[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_GetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_GetMargins[1] = {{ wxLua_wxTextEntryBase_GetMargins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_GetMargins }};
//     wxPoint GetMargins() const;
static int LUACALL wxLua_wxTextEntryBase_GetMargins(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call GetMargins
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetMargins());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_GetRange[] = { &wxluatype_wxTextEntryBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntryBase_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_GetRange[1] = {{ wxLua_wxTextEntryBase_GetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextEntryBase_GetRange }};
//     virtual wxString GetRange(long from, long to) const;
static int LUACALL wxLua_wxTextEntryBase_GetRange(lua_State *L)
{
    // long to
    long to = (long)wxlua_getintegertype(L, 3);
    // long from
    long from = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call GetRange
    wxString returns = (self->GetRange(from, to));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_GetStringSelection[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_GetStringSelection[1] = {{ wxLua_wxTextEntryBase_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_GetStringSelection }};
//     virtual wxString GetStringSelection() const;
static int LUACALL wxLua_wxTextEntryBase_GetStringSelection(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_GetValue[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_GetValue[1] = {{ wxLua_wxTextEntryBase_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_GetValue }};
//     virtual wxString GetValue() const;
static int LUACALL wxLua_wxTextEntryBase_GetValue(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_HasSelection[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_HasSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_HasSelection[1] = {{ wxLua_wxTextEntryBase_HasSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_HasSelection }};
//     bool HasSelection() const;
static int LUACALL wxLua_wxTextEntryBase_HasSelection(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call HasSelection
    bool returns = (self->HasSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_IsEmpty[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_IsEmpty[1] = {{ wxLua_wxTextEntryBase_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_IsEmpty }};
//     bool IsEmpty() const;
static int LUACALL wxLua_wxTextEntryBase_IsEmpty(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_RemoveSelection[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_RemoveSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_RemoveSelection[1] = {{ wxLua_wxTextEntryBase_RemoveSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_RemoveSelection }};
//     void RemoveSelection();
static int LUACALL wxLua_wxTextEntryBase_RemoveSelection(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call RemoveSelection
    self->RemoveSelection();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_Replace[] = { &wxluatype_wxTextEntryBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryBase_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_Replace[1] = {{ wxLua_wxTextEntryBase_Replace, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextEntryBase_Replace }};
//     virtual void Replace(long from, long to, const wxString& value);
static int LUACALL wxLua_wxTextEntryBase_Replace(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 4);
    // long to
    long to = (long)wxlua_getintegertype(L, 3);
    // long from
    long from = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call Replace
    self->Replace(from, to, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SelectAll[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_SelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SelectAll[1] = {{ wxLua_wxTextEntryBase_SelectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SelectAll }};
//     virtual void SelectAll();
static int LUACALL wxLua_wxTextEntryBase_SelectAll(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SelectAll
    self->SelectAll();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SelectNone[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_SelectNone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SelectNone[1] = {{ wxLua_wxTextEntryBase_SelectNone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SelectNone }};
//     virtual void SelectNone();
static int LUACALL wxLua_wxTextEntryBase_SelectNone(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SelectNone
    self->SelectNone();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEvent(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent[1] = {{ wxLua_wxTextEntryBase_SendTextUpdatedEvent, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent }};
//     static bool SendTextUpdatedEvent(wxWindow *win);
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEvent(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SendTextUpdatedEvent
    bool returns = (wxTextEntryBase::SendTextUpdatedEvent(win));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent1[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEvent1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent1[1] = {{ wxLua_wxTextEntryBase_SendTextUpdatedEvent1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent1 }};
//     bool SendTextUpdatedEvent();
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEvent1(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SendTextUpdatedEvent
    bool returns = (self->SendTextUpdatedEvent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed[1] = {{ wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed }};
//     void SendTextUpdatedEventIfAllowed();
static int LUACALL wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SendTextUpdatedEventIfAllowed
    self->SendTextUpdatedEventIfAllowed();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetHint[] = { &wxluatype_wxTextEntryBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetHint[1] = {{ wxLua_wxTextEntryBase_SetHint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_SetHint }};
//     virtual bool SetHint(const wxString& hint);
static int LUACALL wxLua_wxTextEntryBase_SetHint(lua_State *L)
{
    // const wxString hint
    const wxString hint = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetHint
    bool returns = (self->SetHint(hint));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetInsertionPointEnd[] = { &wxluatype_wxTextEntryBase, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetInsertionPointEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetInsertionPointEnd[1] = {{ wxLua_wxTextEntryBase_SetInsertionPointEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SetInsertionPointEnd }};
//     virtual void SetInsertionPointEnd();
static int LUACALL wxLua_wxTextEntryBase_SetInsertionPointEnd(lua_State *L)
{
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetInsertionPointEnd
    self->SetInsertionPointEnd();

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins[] = { &wxluatype_wxTextEntryBase, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetMargins(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetMargins[1] = {{ wxLua_wxTextEntryBase_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins }};
//     bool SetMargins(const wxPoint& pt);
static int LUACALL wxLua_wxTextEntryBase_SetMargins(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetMargins
    bool returns = (self->SetMargins(*pt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins1[] = { &wxluatype_wxTextEntryBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetMargins1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetMargins1[1] = {{ wxLua_wxTextEntryBase_SetMargins1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins1 }};
//     bool SetMargins(wxCoord left, wxCoord top = -1);
static int LUACALL wxLua_wxTextEntryBase_SetMargins1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxCoord top = -1
    wxCoord top = (argCount >= 3 ? (wxCoord)wxlua_getnumbertype(L, 3) : -1);
    // wxCoord left
    wxCoord left = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetMargins
    bool returns = (self->SetMargins(left, top));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetMaxLength[] = { &wxluatype_wxTextEntryBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetMaxLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetMaxLength[1] = {{ wxLua_wxTextEntryBase_SetMaxLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_SetMaxLength }};
//     virtual void SetMaxLength(unsigned long len);
static int LUACALL wxLua_wxTextEntryBase_SetMaxLength(lua_State *L)
{
    // unsigned long len
    unsigned long len = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetMaxLength
    self->SetMaxLength(len);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryBase_SetValue[] = { &wxluatype_wxTextEntryBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryBase_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetValue[1] = {{ wxLua_wxTextEntryBase_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_SetValue }};
//     virtual void SetValue(const wxString& value);
static int LUACALL wxLua_wxTextEntryBase_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntryBase * self = (wxTextEntryBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryBase);
    // call SetValue
    self->SetValue(value);

    return 0;
}



// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent_overload[] =
{
    { wxLua_wxTextEntryBase_SendTextUpdatedEvent, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent },
    { wxLua_wxTextEntryBase_SendTextUpdatedEvent1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryBase_SendTextUpdatedEvent1 },
};
static int s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent_overload_count = sizeof(s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent_overload)/sizeof(wxLuaBindCFunc);


#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryBase_SetMargins_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxTextEntryBase_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxTextEntryBase_SetMargins1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextEntryBase_SetMargins1 },
};
static int s_wxluafunc_wxLua_wxTextEntryBase_SetMargins_overload_count = sizeof(s_wxluafunc_wxLua_wxTextEntryBase_SetMargins_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

void wxLua_wxTextEntryBase_delete_function(void** p)
{
    wxTextEntryBase* o = (wxTextEntryBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextEntryBase_methods[] = {
    { "AppendText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_AppendText, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "AutoComplete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_AutoComplete, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "AutoCompleteDirectories", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_AutoCompleteDirectories, 1, NULL },
    { "AutoCompleteFileNames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_AutoCompleteFileNames, 1, NULL },
    { "CanCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_CanCopy, 1, NULL },
    { "CanCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_CanCut, 1, NULL },
    { "CanPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_CanPaste, 1, NULL },
    { "ChangeValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_ChangeValue, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_Clear, 1, NULL },
    { "ConvertToUpperCase", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_ConvertToUpperCase, 1, NULL },
    { "ForceUpper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_ForceUpper, 1, NULL },
    { "ForwardEnableTextChangedEvents", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_ForwardEnableTextChangedEvents, 1, NULL },
    { "GetHint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_GetHint, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_GetMargins, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_GetRange, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_GetStringSelection, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_GetValue, 1, NULL },
    { "HasSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_HasSelection, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_IsEmpty, 1, NULL },
    { "RemoveSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_RemoveSelection, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_Replace, 1, NULL },
    { "SelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SelectAll, 1, NULL },
    { "SelectNone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SelectNone, 1, NULL },

    { "SendTextUpdatedEvent", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent_overload, s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEvent_overload_count, 0 },

    { "SendTextUpdatedEventIfAllowed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SendTextUpdatedEventIfAllowed, 1, NULL },
    { "SetHint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SetHint, 1, NULL },
    { "SetInsertionPointEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SetInsertionPointEnd, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SetMargins_overload, s_wxluafunc_wxLua_wxTextEntryBase_SetMargins_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "SetMaxLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SetMaxLength, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryBase_SetValue, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxTextEntryBase_methodCount = sizeof(wxTextEntryBase_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxTextEntry
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextEntry'
int wxluatype_wxTextEntry = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_CanRedo[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_CanRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_CanRedo[1] = {{ wxLua_wxTextEntry_CanRedo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_CanRedo }};
//     virtual bool CanRedo() const;
static int LUACALL wxLua_wxTextEntry_CanRedo(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call CanRedo
    bool returns = (self->CanRedo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_CanUndo[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_CanUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_CanUndo[1] = {{ wxLua_wxTextEntry_CanUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_CanUndo }};
//     virtual bool CanUndo() const;
static int LUACALL wxLua_wxTextEntry_CanUndo(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call CanUndo
    bool returns = (self->CanUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Copy[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Copy[1] = {{ wxLua_wxTextEntry_Copy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_Copy }};
//     virtual void Copy();
static int LUACALL wxLua_wxTextEntry_Copy(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Copy
    self->Copy();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Cut[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_Cut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Cut[1] = {{ wxLua_wxTextEntry_Cut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_Cut }};
//     virtual void Cut();
static int LUACALL wxLua_wxTextEntry_Cut(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Cut
    self->Cut();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_ForceUpper[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_ForceUpper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_ForceUpper[1] = {{ wxLua_wxTextEntry_ForceUpper, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_ForceUpper }};
//     virtual void ForceUpper();
static int LUACALL wxLua_wxTextEntry_ForceUpper(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call ForceUpper
    self->ForceUpper();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_GetInsertionPoint[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_GetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_GetInsertionPoint[1] = {{ wxLua_wxTextEntry_GetInsertionPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_GetInsertionPoint }};
//     virtual long GetInsertionPoint() const;
static int LUACALL wxLua_wxTextEntry_GetInsertionPoint(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call GetInsertionPoint
    long  returns = (self->GetInsertionPoint());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_GetLastPosition[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_GetLastPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_GetLastPosition[1] = {{ wxLua_wxTextEntry_GetLastPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_GetLastPosition }};
//     virtual long GetLastPosition() const;
static int LUACALL wxLua_wxTextEntry_GetLastPosition(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call GetLastPosition
    long  returns = (self->GetLastPosition());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_GetSelection[] = { &wxluatype_wxTextEntry, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextEntry_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_GetSelection[1] = {{ wxLua_wxTextEntry_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextEntry_GetSelection }};
// %override wxLua_wxTextEntry_GetSelection
// virtual void GetSelection(long* from, long* to)
static int LUACALL wxLua_wxTextEntry_GetSelection(lua_State *L)
{
    long to;
    long from;
    // get this
    wxTextEntry *self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call GetSelection
    self->GetSelection(&from, &to);
    lua_pushnumber(L, from);
    lua_pushnumber(L, to);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_IsEditable[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_IsEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_IsEditable[1] = {{ wxLua_wxTextEntry_IsEditable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_IsEditable }};
//     virtual bool IsEditable() const;
static int LUACALL wxLua_wxTextEntry_IsEditable(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call IsEditable
    bool returns = (self->IsEditable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Paste[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_Paste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Paste[1] = {{ wxLua_wxTextEntry_Paste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_Paste }};
//     virtual void Paste();
static int LUACALL wxLua_wxTextEntry_Paste(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Paste
    self->Paste();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Redo[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_Redo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Redo[1] = {{ wxLua_wxTextEntry_Redo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_Redo }};
//     virtual void Redo();
static int LUACALL wxLua_wxTextEntry_Redo(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Redo
    self->Redo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Remove[] = { &wxluatype_wxTextEntry, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntry_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Remove[1] = {{ wxLua_wxTextEntry_Remove, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextEntry_Remove }};
//     virtual void Remove(long from, long to);
static int LUACALL wxLua_wxTextEntry_Remove(lua_State *L)
{
    // long to
    long to = (long)wxlua_getintegertype(L, 3);
    // long from
    long from = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Remove
    self->Remove(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_SetEditable[] = { &wxluatype_wxTextEntry, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextEntry_SetEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_SetEditable[1] = {{ wxLua_wxTextEntry_SetEditable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntry_SetEditable }};
//     virtual void SetEditable(bool editable);
static int LUACALL wxLua_wxTextEntry_SetEditable(lua_State *L)
{
    // bool editable
    bool editable = wxlua_getbooleantype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call SetEditable
    self->SetEditable(editable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_SetInsertionPoint[] = { &wxluatype_wxTextEntry, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntry_SetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_SetInsertionPoint[1] = {{ wxLua_wxTextEntry_SetInsertionPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntry_SetInsertionPoint }};
//     virtual void SetInsertionPoint(long pos);
static int LUACALL wxLua_wxTextEntry_SetInsertionPoint(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call SetInsertionPoint
    self->SetInsertionPoint(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_SetMaxLength[] = { &wxluatype_wxTextEntry, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntry_SetMaxLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_SetMaxLength[1] = {{ wxLua_wxTextEntry_SetMaxLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntry_SetMaxLength }};
//     virtual void SetMaxLength(unsigned long len);
static int LUACALL wxLua_wxTextEntry_SetMaxLength(lua_State *L)
{
    // unsigned long len
    unsigned long len = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call SetMaxLength
    self->SetMaxLength(len);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_SetSelection[] = { &wxluatype_wxTextEntry, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextEntry_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_SetSelection[1] = {{ wxLua_wxTextEntry_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextEntry_SetSelection }};
//     virtual void SetSelection(long from, long to);
static int LUACALL wxLua_wxTextEntry_SetSelection(lua_State *L)
{
    // long to
    long to = (long)wxlua_getintegertype(L, 3);
    // long from
    long from = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call SetSelection
    self->SetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_Undo[] = { &wxluatype_wxTextEntry, NULL };
static int LUACALL wxLua_wxTextEntry_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_Undo[1] = {{ wxLua_wxTextEntry_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntry_Undo }};
//     virtual void Undo();
static int LUACALL wxLua_wxTextEntry_Undo(lua_State *L)
{
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call Undo
    self->Undo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntry_WriteText[] = { &wxluatype_wxTextEntry, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntry_WriteText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntry_WriteText[1] = {{ wxLua_wxTextEntry_WriteText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntry_WriteText }};
//     virtual void WriteText(const wxString& text);
static int LUACALL wxLua_wxTextEntry_WriteText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntry * self = (wxTextEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntry);
    // call WriteText
    self->WriteText(text);

    return 0;
}



void wxLua_wxTextEntry_delete_function(void** p)
{
    wxTextEntry* o = (wxTextEntry*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextEntry_methods[] = {
    { "CanRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_CanRedo, 1, NULL },
    { "CanUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_CanUndo, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Copy, 1, NULL },
    { "Cut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Cut, 1, NULL },
    { "ForceUpper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_ForceUpper, 1, NULL },
    { "GetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_GetInsertionPoint, 1, NULL },
    { "GetLastPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_GetLastPosition, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_GetSelection, 1, NULL },
    { "IsEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_IsEditable, 1, NULL },
    { "Paste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Paste, 1, NULL },
    { "Redo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Redo, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Remove, 1, NULL },
    { "SetEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_SetEditable, 1, NULL },
    { "SetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_SetInsertionPoint, 1, NULL },
    { "SetMaxLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_SetMaxLength, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_SetSelection, 1, NULL },
    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_Undo, 1, NULL },
    { "WriteText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntry_WriteText, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxTextEntry_methodCount = sizeof(wxTextEntry_methods)/sizeof(wxLuaBindMethod) - 1;


