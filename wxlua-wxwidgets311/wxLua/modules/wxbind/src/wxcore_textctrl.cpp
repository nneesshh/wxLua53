// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_textctrl.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include "wxlua/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif

#ifdef __GNUC__
    #pragma GCC diagnostic ignored "-Wunused-variable"
#endif // __GNUC__


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttr'
int wxluatype_wxTextAttr = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_AddFlag[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_AddFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_AddFlag[1] = {{ wxLua_wxTextAttr_AddFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_AddFlag }};
//     void AddFlag(long flag);
static int LUACALL wxLua_wxTextAttr_AddFlag(lua_State *L)
{
    // long flag
    long flag = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call AddFlag
    self->AddFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Apply[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Apply[1] = {{ wxLua_wxTextAttr_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_Apply }};
//     bool Apply(const wxTextAttr& style, const wxTextAttr* compareWith = NULL);
static int LUACALL wxLua_wxTextAttr_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttr compareWith = NULL
    const wxTextAttr * compareWith = (argCount >= 3 ? (const wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr) : NULL);
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Apply
    bool returns = (self->Apply(*style, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_BitlistsEqPartial[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_BitlistsEqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_BitlistsEqPartial[1] = {{ wxLua_wxTextAttr_BitlistsEqPartial, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxTextAttr_BitlistsEqPartial }};
//     static bool BitlistsEqPartial(int valueA, int valueB, int flags);
static int LUACALL wxLua_wxTextAttr_BitlistsEqPartial(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getintegertype(L, 3);
    // int valueB
    int valueB = (int)wxlua_getintegertype(L, 2);
    // int valueA
    int valueA = (int)wxlua_getintegertype(L, 1);
    // call BitlistsEqPartial
    bool returns = (wxTextAttr::BitlistsEqPartial(valueA, valueB, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Combine[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextAttr_Combine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Combine[1] = {{ wxLua_wxTextAttr_Combine, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxTextAttr_Combine }};
//     static wxTextAttr Combine(const wxTextAttr& attr, const wxTextAttr& attrDef, const wxTextCtrlBase *text);
static int LUACALL wxLua_wxTextAttr_Combine(lua_State *L)
{
    // const wxTextCtrlBase text
    const wxTextCtrlBase * text = (const wxTextCtrlBase *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextCtrlBase);
    // const wxTextAttr attrDef
    const wxTextAttr * attrDef = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Combine
    // allocate a new object using the copy constructor
    wxTextAttr* returns = new wxTextAttr(wxTextAttr::Combine(*attr, *attrDef, text));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_CombineBitlists[] = { &wxluatype_TLIGHTUSERDATA, &wxluatype_TINTEGER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_CombineBitlists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_CombineBitlists[1] = {{ wxLua_wxTextAttr_CombineBitlists, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 4, s_wxluatypeArray_wxLua_wxTextAttr_CombineBitlists }};
//     static bool CombineBitlists(int& valueA, int valueB, int& flagsA, int flagsB);
static int LUACALL wxLua_wxTextAttr_CombineBitlists(lua_State *L)
{
    // int flagsB
    int flagsB = (int)wxlua_getintegertype(L, 4);
    // int flagsA
    int * flagsA = (int *)wxlua_touserdata(L, 3);
    // int valueB
    int valueB = (int)wxlua_getintegertype(L, 2);
    // int valueA
    int * valueA = (int *)wxlua_touserdata(L, 1);
    // call CombineBitlists
    bool returns = (wxTextAttr::CombineBitlists(*valueA, valueB, *flagsA, flagsB));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Copy[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Copy[1] = {{ wxLua_wxTextAttr_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_Copy }};
//     void Copy(const wxTextAttr& attr);
static int LUACALL wxLua_wxTextAttr_Copy(lua_State *L)
{
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Copy
    self->Copy(*attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_EqPartial[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttr_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_EqPartial[1] = {{ wxLua_wxTextAttr_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_EqPartial }};
//     bool EqPartial(const wxTextAttr& attr, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttr_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call EqPartial
    bool returns = (self->EqPartial(*attr, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetAlignment[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetAlignment[1] = {{ wxLua_wxTextAttr_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetAlignment }};
//     wxTextAttrAlignment GetAlignment() const;
static int LUACALL wxLua_wxTextAttr_GetAlignment(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetAlignment
    wxTextAttrAlignment returns = (self->GetAlignment());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBackgroundColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBackgroundColour[1] = {{ wxLua_wxTextAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBackgroundColour }};
//     const wxColour& GetBackgroundColour() const;
static int LUACALL wxLua_wxTextAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBackgroundColour
    const wxColour* returns = (const wxColour*)&self->GetBackgroundColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBulletFont[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBulletFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBulletFont[1] = {{ wxLua_wxTextAttr_GetBulletFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBulletFont }};
//     const wxString& GetBulletFont() const;
static int LUACALL wxLua_wxTextAttr_GetBulletFont(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBulletFont
    wxString returns = (self->GetBulletFont());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBulletName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBulletName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBulletName[1] = {{ wxLua_wxTextAttr_GetBulletName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBulletName }};
//     const wxString& GetBulletName() const;
static int LUACALL wxLua_wxTextAttr_GetBulletName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBulletName
    wxString returns = (self->GetBulletName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBulletNumber[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBulletNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBulletNumber[1] = {{ wxLua_wxTextAttr_GetBulletNumber, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBulletNumber }};
//     int GetBulletNumber() const;
static int LUACALL wxLua_wxTextAttr_GetBulletNumber(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBulletNumber
    int returns = (self->GetBulletNumber());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBulletStyle[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBulletStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBulletStyle[1] = {{ wxLua_wxTextAttr_GetBulletStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBulletStyle }};
//     int GetBulletStyle() const;
static int LUACALL wxLua_wxTextAttr_GetBulletStyle(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBulletStyle
    int returns = (self->GetBulletStyle());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBulletText[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBulletText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBulletText[1] = {{ wxLua_wxTextAttr_GetBulletText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBulletText }};
//     const wxString& GetBulletText() const;
static int LUACALL wxLua_wxTextAttr_GetBulletText(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBulletText
    wxString returns = (self->GetBulletText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetCharacterStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetCharacterStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetCharacterStyleName[1] = {{ wxLua_wxTextAttr_GetCharacterStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetCharacterStyleName }};
//     const wxString& GetCharacterStyleName() const;
static int LUACALL wxLua_wxTextAttr_GetCharacterStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetCharacterStyleName
    wxString returns = (self->GetCharacterStyleName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFlags[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFlags[1] = {{ wxLua_wxTextAttr_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFlags }};
//     long GetFlags() const;
static int LUACALL wxLua_wxTextAttr_GetFlags(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFlags
    long  returns = (self->GetFlags());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFont[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFont[1] = {{ wxLua_wxTextAttr_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFont }};
//     wxFont GetFont() const;
static int LUACALL wxLua_wxTextAttr_GetFont(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontAttributes[] = { &wxluatype_wxTextAttr, &wxluatype_wxFont, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontAttributes[1] = {{ wxLua_wxTextAttr_GetFontAttributes, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_GetFontAttributes }};
//     bool GetFontAttributes(const wxFont& font, int flags = wxTEXT_ATTR_FONT);
static int LUACALL wxLua_wxTextAttr_GetFontAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxTEXT_ATTR_FONT
    int flags = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : wxTEXT_ATTR_FONT);
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontAttributes
    bool returns = (self->GetFontAttributes(*font, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontEncoding[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontEncoding[1] = {{ wxLua_wxTextAttr_GetFontEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontEncoding }};
//     wxFontEncoding GetFontEncoding() const;
static int LUACALL wxLua_wxTextAttr_GetFontEncoding(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontEncoding
    wxFontEncoding returns = (self->GetFontEncoding());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontFaceName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontFaceName[1] = {{ wxLua_wxTextAttr_GetFontFaceName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontFaceName }};
//     const wxString& GetFontFaceName() const;
static int LUACALL wxLua_wxTextAttr_GetFontFaceName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontFaceName
    wxString returns = (self->GetFontFaceName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontFamily[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontFamily[1] = {{ wxLua_wxTextAttr_GetFontFamily, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontFamily }};
//     wxFontFamily GetFontFamily() const;
static int LUACALL wxLua_wxTextAttr_GetFontFamily(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontFamily
    wxFontFamily returns = (self->GetFontFamily());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontSize[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontSize[1] = {{ wxLua_wxTextAttr_GetFontSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontSize }};
//     int GetFontSize() const;
static int LUACALL wxLua_wxTextAttr_GetFontSize(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontSize
    int returns = (self->GetFontSize());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontStrikethrough[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontStrikethrough(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontStrikethrough[1] = {{ wxLua_wxTextAttr_GetFontStrikethrough, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontStrikethrough }};
//     bool GetFontStrikethrough() const;
static int LUACALL wxLua_wxTextAttr_GetFontStrikethrough(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontStrikethrough
    bool returns = (self->GetFontStrikethrough());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontStyle[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontStyle[1] = {{ wxLua_wxTextAttr_GetFontStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontStyle }};
//     wxFontStyle GetFontStyle() const;
static int LUACALL wxLua_wxTextAttr_GetFontStyle(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontStyle
    wxFontStyle returns = (self->GetFontStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontUnderlined[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontUnderlined[1] = {{ wxLua_wxTextAttr_GetFontUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontUnderlined }};
//     bool GetFontUnderlined() const;
static int LUACALL wxLua_wxTextAttr_GetFontUnderlined(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontUnderlined
    bool returns = (self->GetFontUnderlined());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFontWeight[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFontWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFontWeight[1] = {{ wxLua_wxTextAttr_GetFontWeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFontWeight }};
//     wxFontWeight GetFontWeight() const;
static int LUACALL wxLua_wxTextAttr_GetFontWeight(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFontWeight
    wxFontWeight returns = (self->GetFontWeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetLeftIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetLeftIndent[1] = {{ wxLua_wxTextAttr_GetLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetLeftIndent }};
//     long GetLeftIndent() const;
static int LUACALL wxLua_wxTextAttr_GetLeftIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetLeftIndent
    long  returns = (self->GetLeftIndent());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetLeftSubIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetLeftSubIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetLeftSubIndent[1] = {{ wxLua_wxTextAttr_GetLeftSubIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetLeftSubIndent }};
//     long GetLeftSubIndent() const;
static int LUACALL wxLua_wxTextAttr_GetLeftSubIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetLeftSubIndent
    long  returns = (self->GetLeftSubIndent());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetLineSpacing[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetLineSpacing[1] = {{ wxLua_wxTextAttr_GetLineSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetLineSpacing }};
//     int GetLineSpacing() const;
static int LUACALL wxLua_wxTextAttr_GetLineSpacing(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetLineSpacing
    int returns = (self->GetLineSpacing());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetListStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetListStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetListStyleName[1] = {{ wxLua_wxTextAttr_GetListStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetListStyleName }};
//     const wxString& GetListStyleName() const;
static int LUACALL wxLua_wxTextAttr_GetListStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetListStyleName
    wxString returns = (self->GetListStyleName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetOutlineLevel[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetOutlineLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetOutlineLevel[1] = {{ wxLua_wxTextAttr_GetOutlineLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetOutlineLevel }};
//     int GetOutlineLevel() const;
static int LUACALL wxLua_wxTextAttr_GetOutlineLevel(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetOutlineLevel
    int returns = (self->GetOutlineLevel());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphSpacingAfter[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetParagraphSpacingAfter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetParagraphSpacingAfter[1] = {{ wxLua_wxTextAttr_GetParagraphSpacingAfter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphSpacingAfter }};
//     int GetParagraphSpacingAfter() const;
static int LUACALL wxLua_wxTextAttr_GetParagraphSpacingAfter(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetParagraphSpacingAfter
    int returns = (self->GetParagraphSpacingAfter());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphSpacingBefore[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetParagraphSpacingBefore(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetParagraphSpacingBefore[1] = {{ wxLua_wxTextAttr_GetParagraphSpacingBefore, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphSpacingBefore }};
//     int GetParagraphSpacingBefore() const;
static int LUACALL wxLua_wxTextAttr_GetParagraphSpacingBefore(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetParagraphSpacingBefore
    int returns = (self->GetParagraphSpacingBefore());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetParagraphStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetParagraphStyleName[1] = {{ wxLua_wxTextAttr_GetParagraphStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetParagraphStyleName }};
//     const wxString& GetParagraphStyleName() const;
static int LUACALL wxLua_wxTextAttr_GetParagraphStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetParagraphStyleName
    wxString returns = (self->GetParagraphStyleName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetRightIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetRightIndent[1] = {{ wxLua_wxTextAttr_GetRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetRightIndent }};
//     long GetRightIndent() const;
static int LUACALL wxLua_wxTextAttr_GetRightIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetRightIndent
    long  returns = (self->GetRightIndent());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTabs[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTabs[1] = {{ wxLua_wxTextAttr_GetTabs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTabs }};
//     const wxArrayInt& GetTabs() const;
static int LUACALL wxLua_wxTextAttr_GetTabs(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTabs
    const wxArrayInt* returns = (const wxArrayInt*)&self->GetTabs();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTextColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTextColour[1] = {{ wxLua_wxTextAttr_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTextColour }};
//     const wxColour& GetTextColour() const;
static int LUACALL wxLua_wxTextAttr_GetTextColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTextColour
    const wxColour* returns = (const wxColour*)&self->GetTextColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTextEffectFlags[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTextEffectFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTextEffectFlags[1] = {{ wxLua_wxTextAttr_GetTextEffectFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTextEffectFlags }};
//     int GetTextEffectFlags() const;
static int LUACALL wxLua_wxTextAttr_GetTextEffectFlags(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTextEffectFlags
    int returns = (self->GetTextEffectFlags());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTextEffects[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTextEffects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTextEffects[1] = {{ wxLua_wxTextAttr_GetTextEffects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTextEffects }};
//     int GetTextEffects() const;
static int LUACALL wxLua_wxTextAttr_GetTextEffects(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTextEffects
    int returns = (self->GetTextEffects());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetURL[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetURL[1] = {{ wxLua_wxTextAttr_GetURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetURL }};
//     const wxString& GetURL() const;
static int LUACALL wxLua_wxTextAttr_GetURL(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetURL
    wxString returns = (self->GetURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasAlignment[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasAlignment[1] = {{ wxLua_wxTextAttr_HasAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasAlignment }};
//     bool HasAlignment() const;
static int LUACALL wxLua_wxTextAttr_HasAlignment(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasAlignment
    bool returns = (self->HasAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBackgroundColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBackgroundColour[1] = {{ wxLua_wxTextAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBackgroundColour }};
//     bool HasBackgroundColour() const;
static int LUACALL wxLua_wxTextAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBulletName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBulletName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBulletName[1] = {{ wxLua_wxTextAttr_HasBulletName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBulletName }};
//     bool HasBulletName() const;
static int LUACALL wxLua_wxTextAttr_HasBulletName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBulletName
    bool returns = (self->HasBulletName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBulletNumber[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBulletNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBulletNumber[1] = {{ wxLua_wxTextAttr_HasBulletNumber, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBulletNumber }};
//     bool HasBulletNumber() const;
static int LUACALL wxLua_wxTextAttr_HasBulletNumber(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBulletNumber
    bool returns = (self->HasBulletNumber());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBulletStyle[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBulletStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBulletStyle[1] = {{ wxLua_wxTextAttr_HasBulletStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBulletStyle }};
//     bool HasBulletStyle() const;
static int LUACALL wxLua_wxTextAttr_HasBulletStyle(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBulletStyle
    bool returns = (self->HasBulletStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBulletText[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBulletText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBulletText[1] = {{ wxLua_wxTextAttr_HasBulletText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBulletText }};
//     bool HasBulletText() const;
static int LUACALL wxLua_wxTextAttr_HasBulletText(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBulletText
    bool returns = (self->HasBulletText());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasCharacterStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasCharacterStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasCharacterStyleName[1] = {{ wxLua_wxTextAttr_HasCharacterStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasCharacterStyleName }};
//     bool HasCharacterStyleName() const;
static int LUACALL wxLua_wxTextAttr_HasCharacterStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasCharacterStyleName
    bool returns = (self->HasCharacterStyleName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFlag[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_HasFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFlag[1] = {{ wxLua_wxTextAttr_HasFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_HasFlag }};
//     bool HasFlag(long flag) const;
static int LUACALL wxLua_wxTextAttr_HasFlag(lua_State *L)
{
    // long flag
    long flag = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFlag
    bool returns = (self->HasFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFont[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFont[1] = {{ wxLua_wxTextAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFont }};
//     bool HasFont() const;
static int LUACALL wxLua_wxTextAttr_HasFont(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontEncoding[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontEncoding[1] = {{ wxLua_wxTextAttr_HasFontEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontEncoding }};
//     bool HasFontEncoding() const;
static int LUACALL wxLua_wxTextAttr_HasFontEncoding(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontEncoding
    bool returns = (self->HasFontEncoding());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontFaceName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontFaceName[1] = {{ wxLua_wxTextAttr_HasFontFaceName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontFaceName }};
//     bool HasFontFaceName() const;
static int LUACALL wxLua_wxTextAttr_HasFontFaceName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontFaceName
    bool returns = (self->HasFontFaceName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontFamily[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontFamily[1] = {{ wxLua_wxTextAttr_HasFontFamily, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontFamily }};
//     bool HasFontFamily() const;
static int LUACALL wxLua_wxTextAttr_HasFontFamily(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontFamily
    bool returns = (self->HasFontFamily());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontItalic[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontItalic[1] = {{ wxLua_wxTextAttr_HasFontItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontItalic }};
//     bool HasFontItalic() const;
static int LUACALL wxLua_wxTextAttr_HasFontItalic(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontItalic
    bool returns = (self->HasFontItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontPixelSize[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontPixelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontPixelSize[1] = {{ wxLua_wxTextAttr_HasFontPixelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontPixelSize }};
//     bool HasFontPixelSize() const;
static int LUACALL wxLua_wxTextAttr_HasFontPixelSize(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontPixelSize
    bool returns = (self->HasFontPixelSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontPointSize[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontPointSize[1] = {{ wxLua_wxTextAttr_HasFontPointSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontPointSize }};
//     bool HasFontPointSize() const;
static int LUACALL wxLua_wxTextAttr_HasFontPointSize(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontPointSize
    bool returns = (self->HasFontPointSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontSize[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontSize[1] = {{ wxLua_wxTextAttr_HasFontSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontSize }};
//     bool HasFontSize() const;
static int LUACALL wxLua_wxTextAttr_HasFontSize(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontSize
    bool returns = (self->HasFontSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontStrikethrough[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontStrikethrough(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontStrikethrough[1] = {{ wxLua_wxTextAttr_HasFontStrikethrough, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontStrikethrough }};
//     bool HasFontStrikethrough() const;
static int LUACALL wxLua_wxTextAttr_HasFontStrikethrough(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontStrikethrough
    bool returns = (self->HasFontStrikethrough());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontUnderlined[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontUnderlined[1] = {{ wxLua_wxTextAttr_HasFontUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontUnderlined }};
//     bool HasFontUnderlined() const;
static int LUACALL wxLua_wxTextAttr_HasFontUnderlined(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontUnderlined
    bool returns = (self->HasFontUnderlined());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFontWeight[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFontWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFontWeight[1] = {{ wxLua_wxTextAttr_HasFontWeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFontWeight }};
//     bool HasFontWeight() const;
static int LUACALL wxLua_wxTextAttr_HasFontWeight(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFontWeight
    bool returns = (self->HasFontWeight());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasLeftIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasLeftIndent[1] = {{ wxLua_wxTextAttr_HasLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasLeftIndent }};
//     bool HasLeftIndent() const;
static int LUACALL wxLua_wxTextAttr_HasLeftIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasLeftIndent
    bool returns = (self->HasLeftIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasLineSpacing[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasLineSpacing[1] = {{ wxLua_wxTextAttr_HasLineSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasLineSpacing }};
//     bool HasLineSpacing() const;
static int LUACALL wxLua_wxTextAttr_HasLineSpacing(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasLineSpacing
    bool returns = (self->HasLineSpacing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasListStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasListStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasListStyleName[1] = {{ wxLua_wxTextAttr_HasListStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasListStyleName }};
//     bool HasListStyleName() const;
static int LUACALL wxLua_wxTextAttr_HasListStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasListStyleName
    bool returns = (self->HasListStyleName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasOutlineLevel[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasOutlineLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasOutlineLevel[1] = {{ wxLua_wxTextAttr_HasOutlineLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasOutlineLevel }};
//     bool HasOutlineLevel() const;
static int LUACALL wxLua_wxTextAttr_HasOutlineLevel(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasOutlineLevel
    bool returns = (self->HasOutlineLevel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasPageBreak[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasPageBreak(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasPageBreak[1] = {{ wxLua_wxTextAttr_HasPageBreak, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasPageBreak }};
//     bool HasPageBreak() const;
static int LUACALL wxLua_wxTextAttr_HasPageBreak(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasPageBreak
    bool returns = (self->HasPageBreak());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphSpacingAfter[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasParagraphSpacingAfter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasParagraphSpacingAfter[1] = {{ wxLua_wxTextAttr_HasParagraphSpacingAfter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphSpacingAfter }};
//     bool HasParagraphSpacingAfter() const;
static int LUACALL wxLua_wxTextAttr_HasParagraphSpacingAfter(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasParagraphSpacingAfter
    bool returns = (self->HasParagraphSpacingAfter());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphSpacingBefore[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasParagraphSpacingBefore(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasParagraphSpacingBefore[1] = {{ wxLua_wxTextAttr_HasParagraphSpacingBefore, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphSpacingBefore }};
//     bool HasParagraphSpacingBefore() const;
static int LUACALL wxLua_wxTextAttr_HasParagraphSpacingBefore(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasParagraphSpacingBefore
    bool returns = (self->HasParagraphSpacingBefore());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphStyleName[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasParagraphStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasParagraphStyleName[1] = {{ wxLua_wxTextAttr_HasParagraphStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasParagraphStyleName }};
//     bool HasParagraphStyleName() const;
static int LUACALL wxLua_wxTextAttr_HasParagraphStyleName(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasParagraphStyleName
    bool returns = (self->HasParagraphStyleName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasRightIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasRightIndent[1] = {{ wxLua_wxTextAttr_HasRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasRightIndent }};
//     bool HasRightIndent() const;
static int LUACALL wxLua_wxTextAttr_HasRightIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasRightIndent
    bool returns = (self->HasRightIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTabs[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTabs[1] = {{ wxLua_wxTextAttr_HasTabs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasTabs }};
//     bool HasTabs() const;
static int LUACALL wxLua_wxTextAttr_HasTabs(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTabs
    bool returns = (self->HasTabs());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTextColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTextColour[1] = {{ wxLua_wxTextAttr_HasTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasTextColour }};
//     bool HasTextColour() const;
static int LUACALL wxLua_wxTextAttr_HasTextColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTextColour
    bool returns = (self->HasTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTextEffect[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_HasTextEffect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTextEffect[1] = {{ wxLua_wxTextAttr_HasTextEffect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_HasTextEffect }};
//     bool HasTextEffect(int effect) const;
static int LUACALL wxLua_wxTextAttr_HasTextEffect(lua_State *L)
{
    // int effect
    int effect = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTextEffect
    bool returns = (self->HasTextEffect(effect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTextEffects[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasTextEffects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTextEffects[1] = {{ wxLua_wxTextAttr_HasTextEffects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasTextEffects }};
//     bool HasTextEffects() const;
static int LUACALL wxLua_wxTextAttr_HasTextEffects(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTextEffects
    bool returns = (self->HasTextEffects());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasURL[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasURL[1] = {{ wxLua_wxTextAttr_HasURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasURL }};
//     bool HasURL() const;
static int LUACALL wxLua_wxTextAttr_HasURL(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasURL
    bool returns = (self->HasURL());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Init[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Init[1] = {{ wxLua_wxTextAttr_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_Init }};
//     void Init();
static int LUACALL wxLua_wxTextAttr_Init(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_IsCharacterStyle[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_IsCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_IsCharacterStyle[1] = {{ wxLua_wxTextAttr_IsCharacterStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_IsCharacterStyle }};
//     bool IsCharacterStyle() const;
static int LUACALL wxLua_wxTextAttr_IsCharacterStyle(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call IsCharacterStyle
    bool returns = (self->IsCharacterStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_IsDefault[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_IsDefault[1] = {{ wxLua_wxTextAttr_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxTextAttr_IsDefault(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_IsParagraphStyle[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_IsParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_IsParagraphStyle[1] = {{ wxLua_wxTextAttr_IsParagraphStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_IsParagraphStyle }};
//     bool IsParagraphStyle() const;
static int LUACALL wxLua_wxTextAttr_IsParagraphStyle(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call IsParagraphStyle
    bool returns = (self->IsParagraphStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Merge1[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_Merge1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Merge1[1] = {{ wxLua_wxTextAttr_Merge1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_Merge1 }};
//     void Merge(const wxTextAttr& overlay);
static int LUACALL wxLua_wxTextAttr_Merge1(lua_State *L)
{
    // const wxTextAttr overlay
    const wxTextAttr * overlay = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Merge
    self->Merge(*overlay);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_Merge[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_Merge(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Merge[1] = {{ wxLua_wxTextAttr_Merge, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_Merge }};
//     static wxTextAttr Merge(const wxTextAttr& base, const wxTextAttr& overlay);
static int LUACALL wxLua_wxTextAttr_Merge(lua_State *L)
{
    // const wxTextAttr overlay
    const wxTextAttr * overlay = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // const wxTextAttr base
    const wxTextAttr * base = (const wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call Merge
    // allocate a new object using the copy constructor
    wxTextAttr* returns = new wxTextAttr(wxTextAttr::Merge(*base, *overlay));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_RemoveFlag[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_RemoveFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_RemoveFlag[1] = {{ wxLua_wxTextAttr_RemoveFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_RemoveFlag }};
//     void RemoveFlag(long flag);
static int LUACALL wxLua_wxTextAttr_RemoveFlag(lua_State *L)
{
    // long flag
    long flag = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call RemoveFlag
    self->RemoveFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_RemoveStyle[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_RemoveStyle[1] = {{ wxLua_wxTextAttr_RemoveStyle, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_RemoveStyle }};
//     static bool RemoveStyle(wxTextAttr& destStyle, const wxTextAttr& style);
static int LUACALL wxLua_wxTextAttr_RemoveStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // wxTextAttr destStyle
    wxTextAttr * destStyle = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call RemoveStyle
    bool returns = (wxTextAttr::RemoveStyle(*destStyle, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetAlignment[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetAlignment[1] = {{ wxLua_wxTextAttr_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetAlignment }};
//     void SetAlignment(wxTextAttrAlignment alignment);
static int LUACALL wxLua_wxTextAttr_SetAlignment(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetAlignment
    self->SetAlignment(alignment);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBackgroundColour[] = { &wxluatype_wxTextAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBackgroundColour[1] = {{ wxLua_wxTextAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colBack);
static int LUACALL wxLua_wxTextAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBulletFont[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetBulletFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBulletFont[1] = {{ wxLua_wxTextAttr_SetBulletFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBulletFont }};
//     void SetBulletFont(const wxString& bulletFont);
static int LUACALL wxLua_wxTextAttr_SetBulletFont(lua_State *L)
{
    // const wxString bulletFont
    const wxString bulletFont = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBulletFont
    self->SetBulletFont(bulletFont);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBulletName[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetBulletName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBulletName[1] = {{ wxLua_wxTextAttr_SetBulletName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBulletName }};
//     void SetBulletName(const wxString& name);
static int LUACALL wxLua_wxTextAttr_SetBulletName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBulletName
    self->SetBulletName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBulletNumber[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetBulletNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBulletNumber[1] = {{ wxLua_wxTextAttr_SetBulletNumber, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBulletNumber }};
//     void SetBulletNumber(int n);
static int LUACALL wxLua_wxTextAttr_SetBulletNumber(lua_State *L)
{
    // int n
    int n = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBulletNumber
    self->SetBulletNumber(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBulletStyle[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetBulletStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBulletStyle[1] = {{ wxLua_wxTextAttr_SetBulletStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBulletStyle }};
//     void SetBulletStyle(int style);
static int LUACALL wxLua_wxTextAttr_SetBulletStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBulletStyle
    self->SetBulletStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBulletText[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetBulletText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBulletText[1] = {{ wxLua_wxTextAttr_SetBulletText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBulletText }};
//     void SetBulletText(const wxString& text);
static int LUACALL wxLua_wxTextAttr_SetBulletText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBulletText
    self->SetBulletText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetCharacterStyleName[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetCharacterStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetCharacterStyleName[1] = {{ wxLua_wxTextAttr_SetCharacterStyleName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetCharacterStyleName }};
//     void SetCharacterStyleName(const wxString& name);
static int LUACALL wxLua_wxTextAttr_SetCharacterStyleName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetCharacterStyleName
    self->SetCharacterStyleName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFlags[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFlags[1] = {{ wxLua_wxTextAttr_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFlags }};
//     void SetFlags(long flags);
static int LUACALL wxLua_wxTextAttr_SetFlags(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFont[] = { &wxluatype_wxTextAttr, &wxluatype_wxFont, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFont[1] = {{ wxLua_wxTextAttr_SetFont, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_SetFont }};
//     void SetFont(const wxFont& font, int flags = wxTEXT_ATTR_FONT);
static int LUACALL wxLua_wxTextAttr_SetFont(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxTEXT_ATTR_FONT
    int flags = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : wxTEXT_ATTR_FONT);
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFont
    self->SetFont(*font, flags);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontEncoding[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontEncoding[1] = {{ wxLua_wxTextAttr_SetFontEncoding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontEncoding }};
//     void SetFontEncoding(wxFontEncoding encoding);
static int LUACALL wxLua_wxTextAttr_SetFontEncoding(lua_State *L)
{
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontEncoding
    self->SetFontEncoding(encoding);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontFaceName[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontFaceName[1] = {{ wxLua_wxTextAttr_SetFontFaceName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontFaceName }};
//     void SetFontFaceName(const wxString& faceName);
static int LUACALL wxLua_wxTextAttr_SetFontFaceName(lua_State *L)
{
    // const wxString faceName
    const wxString faceName = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontFaceName
    self->SetFontFaceName(faceName);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontFamily[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontFamily[1] = {{ wxLua_wxTextAttr_SetFontFamily, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontFamily }};
//     void SetFontFamily(wxFontFamily family);
static int LUACALL wxLua_wxTextAttr_SetFontFamily(lua_State *L)
{
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontFamily
    self->SetFontFamily(family);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontPixelSize[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontPixelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontPixelSize[1] = {{ wxLua_wxTextAttr_SetFontPixelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontPixelSize }};
//     void SetFontPixelSize(int pixelSize);
static int LUACALL wxLua_wxTextAttr_SetFontPixelSize(lua_State *L)
{
    // int pixelSize
    int pixelSize = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontPixelSize
    self->SetFontPixelSize(pixelSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontPointSize[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontPointSize[1] = {{ wxLua_wxTextAttr_SetFontPointSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontPointSize }};
//     void SetFontPointSize(int pointSize);
static int LUACALL wxLua_wxTextAttr_SetFontPointSize(lua_State *L)
{
    // int pointSize
    int pointSize = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontPointSize
    self->SetFontPointSize(pointSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontSize[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontSize[1] = {{ wxLua_wxTextAttr_SetFontSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontSize }};
//     void SetFontSize(int pointSize);
static int LUACALL wxLua_wxTextAttr_SetFontSize(lua_State *L)
{
    // int pointSize
    int pointSize = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontSize
    self->SetFontSize(pointSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontStrikethrough[] = { &wxluatype_wxTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontStrikethrough(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontStrikethrough[1] = {{ wxLua_wxTextAttr_SetFontStrikethrough, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontStrikethrough }};
//     void SetFontStrikethrough(bool strikethrough);
static int LUACALL wxLua_wxTextAttr_SetFontStrikethrough(lua_State *L)
{
    // bool strikethrough
    bool strikethrough = wxlua_getbooleantype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontStrikethrough
    self->SetFontStrikethrough(strikethrough);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontStyle[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontStyle[1] = {{ wxLua_wxTextAttr_SetFontStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontStyle }};
//     void SetFontStyle(wxFontStyle fontStyle);
static int LUACALL wxLua_wxTextAttr_SetFontStyle(lua_State *L)
{
    // wxFontStyle fontStyle
    wxFontStyle fontStyle = (wxFontStyle)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontStyle
    self->SetFontStyle(fontStyle);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontUnderlined[] = { &wxluatype_wxTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontUnderlined[1] = {{ wxLua_wxTextAttr_SetFontUnderlined, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontUnderlined }};
//     void SetFontUnderlined(bool underlined);
static int LUACALL wxLua_wxTextAttr_SetFontUnderlined(lua_State *L)
{
    // bool underlined
    bool underlined = wxlua_getbooleantype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontUnderlined
    self->SetFontUnderlined(underlined);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFontWeight[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFontWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFontWeight[1] = {{ wxLua_wxTextAttr_SetFontWeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFontWeight }};
//     void SetFontWeight(wxFontWeight fontWeight);
static int LUACALL wxLua_wxTextAttr_SetFontWeight(lua_State *L)
{
    // wxFontWeight fontWeight
    wxFontWeight fontWeight = (wxFontWeight)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFontWeight
    self->SetFontWeight(fontWeight);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetLeftIndent[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetLeftIndent[1] = {{ wxLua_wxTextAttr_SetLeftIndent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_SetLeftIndent }};
//     void SetLeftIndent(int indent, int subIndent = 0);
static int LUACALL wxLua_wxTextAttr_SetLeftIndent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int subIndent = 0
    int subIndent = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : 0);
    // int indent
    int indent = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetLeftIndent
    self->SetLeftIndent(indent, subIndent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetLineSpacing[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetLineSpacing[1] = {{ wxLua_wxTextAttr_SetLineSpacing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetLineSpacing }};
//     void SetLineSpacing(int spacing);
static int LUACALL wxLua_wxTextAttr_SetLineSpacing(lua_State *L)
{
    // int spacing
    int spacing = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetLineSpacing
    self->SetLineSpacing(spacing);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetListStyleName[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetListStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetListStyleName[1] = {{ wxLua_wxTextAttr_SetListStyleName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetListStyleName }};
//     void SetListStyleName(const wxString& name);
static int LUACALL wxLua_wxTextAttr_SetListStyleName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetListStyleName
    self->SetListStyleName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetOutlineLevel[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetOutlineLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetOutlineLevel[1] = {{ wxLua_wxTextAttr_SetOutlineLevel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetOutlineLevel }};
//     void SetOutlineLevel(int level);
static int LUACALL wxLua_wxTextAttr_SetOutlineLevel(lua_State *L)
{
    // int level
    int level = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetOutlineLevel
    self->SetOutlineLevel(level);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetPageBreak[] = { &wxluatype_wxTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttr_SetPageBreak(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetPageBreak[1] = {{ wxLua_wxTextAttr_SetPageBreak, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetPageBreak }};
//     void SetPageBreak(bool pageBreak = true);
static int LUACALL wxLua_wxTextAttr_SetPageBreak(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool pageBreak = true
    bool pageBreak = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetPageBreak
    self->SetPageBreak(pageBreak);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphSpacingAfter[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetParagraphSpacingAfter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetParagraphSpacingAfter[1] = {{ wxLua_wxTextAttr_SetParagraphSpacingAfter, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphSpacingAfter }};
//     void SetParagraphSpacingAfter(int spacing);
static int LUACALL wxLua_wxTextAttr_SetParagraphSpacingAfter(lua_State *L)
{
    // int spacing
    int spacing = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetParagraphSpacingAfter
    self->SetParagraphSpacingAfter(spacing);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphSpacingBefore[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetParagraphSpacingBefore(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetParagraphSpacingBefore[1] = {{ wxLua_wxTextAttr_SetParagraphSpacingBefore, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphSpacingBefore }};
//     void SetParagraphSpacingBefore(int spacing);
static int LUACALL wxLua_wxTextAttr_SetParagraphSpacingBefore(lua_State *L)
{
    // int spacing
    int spacing = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetParagraphSpacingBefore
    self->SetParagraphSpacingBefore(spacing);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphStyleName[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetParagraphStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetParagraphStyleName[1] = {{ wxLua_wxTextAttr_SetParagraphStyleName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetParagraphStyleName }};
//     void SetParagraphStyleName(const wxString& name);
static int LUACALL wxLua_wxTextAttr_SetParagraphStyleName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetParagraphStyleName
    self->SetParagraphStyleName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetRightIndent[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetRightIndent[1] = {{ wxLua_wxTextAttr_SetRightIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetRightIndent }};
//     void SetRightIndent(int indent);
static int LUACALL wxLua_wxTextAttr_SetRightIndent(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetRightIndent
    self->SetRightIndent(indent);

    return 0;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTabs[] = { &wxluatype_wxTextAttr, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxTextAttr_SetTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTabs[1] = {{ wxLua_wxTextAttr_SetTabs, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTabs }};
//     void SetTabs(const wxArrayInt& tabs);
static int LUACALL wxLua_wxTextAttr_SetTabs(lua_State *L)
{
    // const wxArrayInt tabs
    wxLuaSmartwxArrayInt tabs = wxlua_getwxArrayInt(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTabs
    self->SetTabs(tabs);

    return 0;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTextColour[] = { &wxluatype_wxTextAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttr_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTextColour[1] = {{ wxLua_wxTextAttr_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTextColour }};
//     void SetTextColour(const wxColour& colText);
static int LUACALL wxLua_wxTextAttr_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTextEffectFlags[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetTextEffectFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTextEffectFlags[1] = {{ wxLua_wxTextAttr_SetTextEffectFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTextEffectFlags }};
//     void SetTextEffectFlags(int effects);
static int LUACALL wxLua_wxTextAttr_SetTextEffectFlags(lua_State *L)
{
    // int effects
    int effects = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTextEffectFlags
    self->SetTextEffectFlags(effects);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTextEffects[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetTextEffects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTextEffects[1] = {{ wxLua_wxTextAttr_SetTextEffects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTextEffects }};
//     void SetTextEffects(int effects);
static int LUACALL wxLua_wxTextAttr_SetTextEffects(lua_State *L)
{
    // int effects
    int effects = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTextEffects
    self->SetTextEffects(effects);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetURL[] = { &wxluatype_wxTextAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextAttr_SetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetURL[1] = {{ wxLua_wxTextAttr_SetURL, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetURL }};
//     void SetURL(const wxString& url);
static int LUACALL wxLua_wxTextAttr_SetURL(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetURL
    self->SetURL(url);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SplitParaCharStyles[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_SplitParaCharStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SplitParaCharStyles[1] = {{ wxLua_wxTextAttr_SplitParaCharStyles, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxTextAttr_SplitParaCharStyles }};
//     static bool SplitParaCharStyles(const wxTextAttr& style, wxTextAttr& parStyle, wxTextAttr& charStyle);
static int LUACALL wxLua_wxTextAttr_SplitParaCharStyles(lua_State *L)
{
    // wxTextAttr charStyle
    wxTextAttr * charStyle = (wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // wxTextAttr parStyle
    wxTextAttr * parStyle = (wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SplitParaCharStyles
    bool returns = (wxTextAttr::SplitParaCharStyles(*style, *parStyle, *charStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_TabsEq[] = { &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxTextAttr_TabsEq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_TabsEq[1] = {{ wxLua_wxTextAttr_TabsEq, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_TabsEq }};
//     static bool TabsEq(const wxArrayInt& tabs1, const wxArrayInt& tabs2);
static int LUACALL wxLua_wxTextAttr_TabsEq(lua_State *L)
{
    // const wxArrayInt tabs2
    wxLuaSmartwxArrayInt tabs2 = wxlua_getwxArrayInt(L, 2);
    // const wxArrayInt tabs1
    wxLuaSmartwxArrayInt tabs1 = wxlua_getwxArrayInt(L, 1);
    // call TabsEq
    bool returns = (wxTextAttr::TabsEq(tabs1, tabs2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_delete[] = { &wxluatype_wxTextAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_delete }};


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_constructor[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxFont, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_constructor[1] = {{ wxLua_wxTextAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 4, s_wxluatypeArray_wxLua_wxTextAttr_constructor }};
//     wxTextAttr(const wxColour& colText, const wxColour& colBack = wxNullColour, const wxFont& font = wxNullFont, wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT);
static int LUACALL wxLua_wxTextAttr_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT
    wxTextAttrAlignment alignment = (argCount >= 4 ? (wxTextAttrAlignment)wxlua_getenumtype(L, 4) : wxTEXT_ALIGNMENT_DEFAULT);
    // const wxFont font = wxNullFont
    const wxFont * font = (argCount >= 3 ? (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : &wxNullFont);
    // const wxColour colBack = wxNullColour
    const wxColour * colBack = (argCount >= 2 ? (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour) : &wxNullColour);
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxTextAttr* returns = new wxTextAttr(*colText, *colBack, *font, alignment);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)



#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_Merge_overload[] =
{
    { wxLua_wxTextAttr_Merge1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_Merge1 },
    { wxLua_wxTextAttr_Merge, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_Merge },
};
static int s_wxluafunc_wxLua_wxTextAttr_Merge_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttr_Merge_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

void wxLua_wxTextAttr_delete_function(void** p)
{
    wxTextAttr* o = (wxTextAttr*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttr_methods[] = {
    { "AddFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_AddFlag, 1, NULL },
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_Apply, 1, NULL },
    { "BitlistsEqPartial", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_BitlistsEqPartial, 1, NULL },
    { "Combine", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_Combine, 1, NULL },
    { "CombineBitlists", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_CombineBitlists, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_Copy, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_EqPartial, 1, NULL },
    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetBulletFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBulletFont, 1, NULL },
    { "GetBulletName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBulletName, 1, NULL },
    { "GetBulletNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBulletNumber, 1, NULL },
    { "GetBulletStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBulletStyle, 1, NULL },
    { "GetBulletText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBulletText, 1, NULL },
    { "GetCharacterStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetCharacterStyleName, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFlags, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFont, 1, NULL },
    { "GetFontAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontAttributes, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
    { "GetFontEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontEncoding, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

    { "GetFontFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontFaceName, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetFontFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontFamily, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontSize, 1, NULL },
    { "GetFontStrikethrough", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontStrikethrough, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetFontStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontStyle, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetFontUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontUnderlined, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetFontWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFontWeight, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetLeftIndent, 1, NULL },
    { "GetLeftSubIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetLeftSubIndent, 1, NULL },
    { "GetLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetLineSpacing, 1, NULL },
    { "GetListStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetListStyleName, 1, NULL },
    { "GetOutlineLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetOutlineLevel, 1, NULL },
    { "GetParagraphSpacingAfter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetParagraphSpacingAfter, 1, NULL },
    { "GetParagraphSpacingBefore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetParagraphSpacingBefore, 1, NULL },
    { "GetParagraphStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetParagraphStyleName, 1, NULL },
    { "GetRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetRightIndent, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTabs, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetTextEffectFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTextEffectFlags, 1, NULL },
    { "GetTextEffects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTextEffects, 1, NULL },
    { "GetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetURL, 1, NULL },
    { "HasAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasAlignment, 1, NULL },
    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBackgroundColour, 1, NULL },
    { "HasBulletName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBulletName, 1, NULL },
    { "HasBulletNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBulletNumber, 1, NULL },
    { "HasBulletStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBulletStyle, 1, NULL },
    { "HasBulletText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBulletText, 1, NULL },
    { "HasCharacterStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasCharacterStyleName, 1, NULL },
    { "HasFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFlag, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFont, 1, NULL },
    { "HasFontEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontEncoding, 1, NULL },
    { "HasFontFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontFaceName, 1, NULL },
    { "HasFontFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontFamily, 1, NULL },
    { "HasFontItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontItalic, 1, NULL },
    { "HasFontPixelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontPixelSize, 1, NULL },
    { "HasFontPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontPointSize, 1, NULL },
    { "HasFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontSize, 1, NULL },
    { "HasFontStrikethrough", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontStrikethrough, 1, NULL },
    { "HasFontUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontUnderlined, 1, NULL },
    { "HasFontWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFontWeight, 1, NULL },
    { "HasLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasLeftIndent, 1, NULL },
    { "HasLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasLineSpacing, 1, NULL },
    { "HasListStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasListStyleName, 1, NULL },
    { "HasOutlineLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasOutlineLevel, 1, NULL },
    { "HasPageBreak", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasPageBreak, 1, NULL },
    { "HasParagraphSpacingAfter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasParagraphSpacingAfter, 1, NULL },
    { "HasParagraphSpacingBefore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasParagraphSpacingBefore, 1, NULL },
    { "HasParagraphStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasParagraphStyleName, 1, NULL },
    { "HasRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasRightIndent, 1, NULL },
    { "HasTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTabs, 1, NULL },
    { "HasTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTextColour, 1, NULL },
    { "HasTextEffect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTextEffect, 1, NULL },
    { "HasTextEffects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTextEffects, 1, NULL },
    { "HasURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasURL, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_Init, 1, NULL },
    { "IsCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_IsCharacterStyle, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_IsDefault, 1, NULL },
    { "IsParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_IsParagraphStyle, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "Merge", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_Merge_overload, s_wxluafunc_wxLua_wxTextAttr_Merge_overload_count, 0 },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "RemoveFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_RemoveFlag, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_RemoveStyle, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetBulletFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBulletFont, 1, NULL },
    { "SetBulletName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBulletName, 1, NULL },
    { "SetBulletNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBulletNumber, 1, NULL },
    { "SetBulletStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBulletStyle, 1, NULL },
    { "SetBulletText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBulletText, 1, NULL },
    { "SetCharacterStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetCharacterStyleName, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFlags, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
    { "SetFontEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontEncoding, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

    { "SetFontFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontFaceName, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetFontFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontFamily, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetFontPixelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontPixelSize, 1, NULL },
    { "SetFontPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontPointSize, 1, NULL },
    { "SetFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontSize, 1, NULL },
    { "SetFontStrikethrough", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontStrikethrough, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetFontStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontStyle, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetFontUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontUnderlined, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetFontWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFontWeight, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetLeftIndent, 1, NULL },
    { "SetLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetLineSpacing, 1, NULL },
    { "SetListStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetListStyleName, 1, NULL },
    { "SetOutlineLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetOutlineLevel, 1, NULL },
    { "SetPageBreak", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetPageBreak, 1, NULL },
    { "SetParagraphSpacingAfter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetParagraphSpacingAfter, 1, NULL },
    { "SetParagraphSpacingBefore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetParagraphSpacingBefore, 1, NULL },
    { "SetParagraphStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetParagraphStyleName, 1, NULL },
    { "SetRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetRightIndent, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTabs, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetTextEffectFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTextEffectFlags, 1, NULL },
    { "SetTextEffects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTextEffects, 1, NULL },
    { "SetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetURL, 1, NULL },
    { "SplitParaCharStyles", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_SplitParaCharStyles, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "TabsEq", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextAttr_TabsEq, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttr_delete, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "wxTextAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttr_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { 0, 0, 0, 0 },
};

int wxTextAttr_methodCount = sizeof(wxTextAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextAreaBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAreaBase'
int wxluatype_wxTextAreaBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_GetDefaultStyle[] = { &wxluatype_wxTextAreaBase, NULL };
static int LUACALL wxLua_wxTextAreaBase_GetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_GetDefaultStyle[1] = {{ wxLua_wxTextAreaBase_GetDefaultStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAreaBase_GetDefaultStyle }};
//     virtual const wxTextAttr& GetDefaultStyle() const;
static int LUACALL wxLua_wxTextAreaBase_GetDefaultStyle(lua_State *L)
{
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call GetDefaultStyle
    const wxTextAttr* returns = (const wxTextAttr*)&self->GetDefaultStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest1[] = { &wxluatype_wxTextAreaBase, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextAreaBase_HitTest1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_HitTest1[1] = {{ wxLua_wxTextAreaBase_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest1 }};
//     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord *col, wxTextCoord *row) const;
static int LUACALL wxLua_wxTextAreaBase_HitTest1(lua_State *L)
{
    // wxTextCoord row
    wxTextCoord * row = (wxTextCoord *)wxlua_touserdata(L, 4);
    // wxTextCoord col
    wxTextCoord * col = (wxTextCoord *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, col, row));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest[] = { &wxluatype_wxTextAreaBase, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextAreaBase_HitTest(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_HitTest[1] = {{ wxLua_wxTextAreaBase_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest }};
//     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
static int LUACALL wxLua_wxTextAreaBase_HitTest(lua_State *L)
{
    // long pos
    long * pos = (long *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, pos));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_LoadFile[] = { &wxluatype_wxTextAreaBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAreaBase_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_LoadFile[1] = {{ wxLua_wxTextAreaBase_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAreaBase_LoadFile }};
//     bool LoadFile(const wxString& file, int fileType = wxTEXT_TYPE_ANY);
static int LUACALL wxLua_wxTextAreaBase_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int fileType = wxTEXT_TYPE_ANY
    int fileType = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : wxTEXT_TYPE_ANY);
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call LoadFile
    bool returns = (self->LoadFile(file, fileType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_PositionToCoords[] = { &wxluatype_wxTextAreaBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAreaBase_PositionToCoords(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_PositionToCoords[1] = {{ wxLua_wxTextAreaBase_PositionToCoords, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAreaBase_PositionToCoords }};
//     wxPoint PositionToCoords(long pos) const;
static int LUACALL wxLua_wxTextAreaBase_PositionToCoords(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call PositionToCoords
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->PositionToCoords(pos));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_SaveFile[] = { &wxluatype_wxTextAreaBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAreaBase_SaveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_SaveFile[1] = {{ wxLua_wxTextAreaBase_SaveFile, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxTextAreaBase_SaveFile }};
//     bool SaveFile(const wxString& file = wxEmptyString, int fileType = wxTEXT_TYPE_ANY);
static int LUACALL wxLua_wxTextAreaBase_SaveFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int fileType = wxTEXT_TYPE_ANY
    int fileType = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : wxTEXT_TYPE_ANY);
    // const wxString file = wxEmptyString
    const wxString file = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call SaveFile
    bool returns = (self->SaveFile(file, fileType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAreaBase_SetModified[] = { &wxluatype_wxTextAreaBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAreaBase_SetModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_SetModified[1] = {{ wxLua_wxTextAreaBase_SetModified, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAreaBase_SetModified }};
//     void SetModified(bool modified);
static int LUACALL wxLua_wxTextAreaBase_SetModified(lua_State *L)
{
    // bool modified
    bool modified = wxlua_getbooleantype(L, 2);
    // get this
    wxTextAreaBase * self = (wxTextAreaBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAreaBase);
    // call SetModified
    self->SetModified(modified);

    return 0;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAreaBase_HitTest_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextAreaBase_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextAreaBase_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAreaBase_HitTest },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxTextAreaBase_HitTest_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAreaBase_HitTest_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

void wxLua_wxTextAreaBase_delete_function(void** p)
{
    wxTextAreaBase* o = (wxTextAreaBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAreaBase_methods[] = {
    { "GetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_GetDefaultStyle, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_HitTest_overload, s_wxluafunc_wxLua_wxTextAreaBase_HitTest_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_LoadFile, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "PositionToCoords", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_PositionToCoords, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_SaveFile, 1, NULL },
    { "SetModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAreaBase_SetModified, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextAreaBase_methodCount = sizeof(wxTextAreaBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextCtrlIface
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextCtrlIface'
int wxluatype_wxTextCtrlIface = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlIface_GetValue[] = { &wxluatype_wxTextCtrlIface, NULL };
static int LUACALL wxLua_wxTextCtrlIface_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlIface_GetValue[1] = {{ wxLua_wxTextCtrlIface_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlIface_GetValue }};
//     virtual wxString GetValue() const;
static int LUACALL wxLua_wxTextCtrlIface_GetValue(lua_State *L)
{
    // get this
    wxTextCtrlIface * self = (wxTextCtrlIface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlIface);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlIface_SetValue[] = { &wxluatype_wxTextCtrlIface, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrlIface_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlIface_SetValue[1] = {{ wxLua_wxTextCtrlIface_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrlIface_SetValue }};
//     virtual void SetValue(const wxString& value);
static int LUACALL wxLua_wxTextCtrlIface_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrlIface * self = (wxTextCtrlIface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlIface);
    // call SetValue
    self->SetValue(value);

    return 0;
}




void wxLua_wxTextCtrlIface_delete_function(void** p)
{
    wxTextCtrlIface* o = (wxTextCtrlIface*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextCtrlIface_methods[] = {
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlIface_GetValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlIface_SetValue, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextCtrlIface_methodCount = sizeof(wxTextCtrlIface_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextCtrlBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextCtrlBase'
int wxluatype_wxTextCtrlBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_DoUpdateWindowUI[] = { &wxluatype_wxTextCtrlBase, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrlBase_DoUpdateWindowUI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_DoUpdateWindowUI[1] = {{ wxLua_wxTextCtrlBase_DoUpdateWindowUI, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrlBase_DoUpdateWindowUI }};
//     virtual void DoUpdateWindowUI(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrlBase_DoUpdateWindowUI(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call DoUpdateWindowUI
    self->DoUpdateWindowUI(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_EmulateKeyPress[] = { &wxluatype_wxTextCtrlBase, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxTextCtrlBase_EmulateKeyPress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_EmulateKeyPress[1] = {{ wxLua_wxTextCtrlBase_EmulateKeyPress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrlBase_EmulateKeyPress }};
//     virtual bool EmulateKeyPress(const wxKeyEvent& event);
static int LUACALL wxLua_wxTextCtrlBase_EmulateKeyPress(lua_State *L)
{
    // const wxKeyEvent event
    const wxKeyEvent * event = (const wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call EmulateKeyPress
    bool returns = (self->EmulateKeyPress(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_GetClassDefaultAttributes[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrlBase_GetClassDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_GetClassDefaultAttributes[1] = {{ wxLua_wxTextCtrlBase_GetClassDefaultAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_GetClassDefaultAttributes }};
//     static wxVisualAttributes GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);
static int LUACALL wxLua_wxTextCtrlBase_GetClassDefaultAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    wxWindowVariant variant = (argCount >= 1 ? (wxWindowVariant)wxlua_getenumtype(L, 1) : wxWINDOW_VARIANT_NORMAL);
    // call GetClassDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(wxTextCtrlBase::GetClassDefaultAttributes(variant));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_GetDefaultAttributes[] = { &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextCtrlBase_GetDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_GetDefaultAttributes[1] = {{ wxLua_wxTextCtrlBase_GetDefaultAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_GetDefaultAttributes }};
//     virtual wxVisualAttributes GetDefaultAttributes() const;
static int LUACALL wxLua_wxTextCtrlBase_GetDefaultAttributes(lua_State *L)
{
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call GetDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(self->GetDefaultAttributes());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_GetStyle[] = { &wxluatype_wxTextCtrlBase, &wxluatype_TINTEGER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrlBase_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_GetStyle[1] = {{ wxLua_wxTextCtrlBase_GetStyle, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrlBase_GetStyle }};
//     virtual bool GetStyle(long position, wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrlBase_GetStyle(lua_State *L)
{
    // wxTextAttr style
    wxTextAttr * style = (wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // long position
    long position = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call GetStyle
    bool returns = (self->GetStyle(position, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_GetValue[] = { &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextCtrlBase_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_GetValue[1] = {{ wxLua_wxTextCtrlBase_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_GetValue }};
//     virtual wxString GetValue() const;
static int LUACALL wxLua_wxTextCtrlBase_GetValue(lua_State *L)
{
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest1[] = { &wxluatype_wxTextCtrlBase, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrlBase_HitTest1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_HitTest1[1] = {{ wxLua_wxTextCtrlBase_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest1 }};
//     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord *col, wxTextCoord *row) const;
static int LUACALL wxLua_wxTextCtrlBase_HitTest1(lua_State *L)
{
    // wxTextCoord row
    wxTextCoord * row = (wxTextCoord *)wxlua_touserdata(L, 4);
    // wxTextCoord col
    wxTextCoord * col = (wxTextCoord *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, col, row));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest[] = { &wxluatype_wxTextCtrlBase, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrlBase_HitTest(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_HitTest[1] = {{ wxLua_wxTextCtrlBase_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest }};
//     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
static int LUACALL wxLua_wxTextCtrlBase_HitTest(lua_State *L)
{
    // long pos
    long * pos = (long *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, pos));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_IsMultiLine[] = { &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextCtrlBase_IsMultiLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_IsMultiLine[1] = {{ wxLua_wxTextCtrlBase_IsMultiLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_IsMultiLine }};
//     bool IsMultiLine() const;
static int LUACALL wxLua_wxTextCtrlBase_IsMultiLine(lua_State *L)
{
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call IsMultiLine
    bool returns = (self->IsMultiLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_IsSingleLine[] = { &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextCtrlBase_IsSingleLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_IsSingleLine[1] = {{ wxLua_wxTextCtrlBase_IsSingleLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_IsSingleLine }};
//     bool IsSingleLine() const;
static int LUACALL wxLua_wxTextCtrlBase_IsSingleLine(lua_State *L)
{
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call IsSingleLine
    bool returns = (self->IsSingleLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_SetDefaultStyle[] = { &wxluatype_wxTextCtrlBase, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrlBase_SetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_SetDefaultStyle[1] = {{ wxLua_wxTextCtrlBase_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrlBase_SetDefaultStyle }};
//     virtual bool SetDefaultStyle(const wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrlBase_SetDefaultStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_SetStyle[] = { &wxluatype_wxTextCtrlBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrlBase_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_SetStyle[1] = {{ wxLua_wxTextCtrlBase_SetStyle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrlBase_SetStyle }};
//     virtual bool SetStyle(long start, long end, const wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrlBase_SetStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttr);
    // long end
    long end = (long)wxlua_getintegertype(L, 3);
    // long start
    long start = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call SetStyle
    bool returns = (self->SetStyle(start, end, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_SetValue[] = { &wxluatype_wxTextCtrlBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrlBase_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_SetValue[1] = {{ wxLua_wxTextCtrlBase_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrlBase_SetValue }};
//     virtual void SetValue(const wxString& value);
static int LUACALL wxLua_wxTextCtrlBase_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call SetValue
    self->SetValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrlBase_ShouldInheritColours[] = { &wxluatype_wxTextCtrlBase, NULL };
static int LUACALL wxLua_wxTextCtrlBase_ShouldInheritColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_ShouldInheritColours[1] = {{ wxLua_wxTextCtrlBase_ShouldInheritColours, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrlBase_ShouldInheritColours }};
//     virtual bool ShouldInheritColours() const;
static int LUACALL wxLua_wxTextCtrlBase_ShouldInheritColours(lua_State *L)
{
    // get this
    wxTextCtrlBase * self = (wxTextCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrlBase);
    // call ShouldInheritColours
    bool returns = (self->ShouldInheritColours());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrlBase_HitTest_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrlBase_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrlBase_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrlBase_HitTest },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxTextCtrlBase_HitTest_overload_count = sizeof(s_wxluafunc_wxLua_wxTextCtrlBase_HitTest_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

void wxLua_wxTextCtrlBase_delete_function(void** p)
{
    wxTextCtrlBase* o = (wxTextCtrlBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextCtrlBase_methods[] = {
    { "DoUpdateWindowUI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_DoUpdateWindowUI, 1, NULL },
    { "EmulateKeyPress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_EmulateKeyPress, 1, NULL },
    { "GetClassDefaultAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTextCtrlBase_GetClassDefaultAttributes, 1, NULL },
    { "GetDefaultAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_GetDefaultAttributes, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_GetStyle, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_GetValue, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_HitTest_overload, s_wxluafunc_wxLua_wxTextCtrlBase_HitTest_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { "IsMultiLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_IsMultiLine, 1, NULL },
    { "IsSingleLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_IsSingleLine, 1, NULL },
    { "SetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_SetDefaultStyle, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_SetStyle, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_SetValue, 1, NULL },
    { "ShouldInheritColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrlBase_ShouldInheritColours, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextCtrlBase_methodCount = sizeof(wxTextCtrlBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextUrlEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextUrlEvent'
int wxluatype_wxTextUrlEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_Clone[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_Clone[1] = {{ wxLua_wxTextUrlEvent_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_Clone }};
//     virtual wxEvent *Clone();
static int LUACALL wxLua_wxTextUrlEvent_Clone(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call Clone
    wxEvent* returns = (wxEvent*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetMouseEvent[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetMouseEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetMouseEvent[1] = {{ wxLua_wxTextUrlEvent_GetMouseEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetMouseEvent }};
//     const wxMouseEvent& GetMouseEvent() const;
static int LUACALL wxLua_wxTextUrlEvent_GetMouseEvent(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetMouseEvent
    const wxMouseEvent* returns = (const wxMouseEvent*)&self->GetMouseEvent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLEnd[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetURLEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetURLEnd[1] = {{ wxLua_wxTextUrlEvent_GetURLEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLEnd }};
//     long GetURLEnd() const;
static int LUACALL wxLua_wxTextUrlEvent_GetURLEnd(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetURLEnd
    long  returns = (self->GetURLEnd());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLStart[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetURLStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetURLStart[1] = {{ wxLua_wxTextUrlEvent_GetURLStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLStart }};
//     long GetURLStart() const;
static int LUACALL wxLua_wxTextUrlEvent_GetURLStart(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetURLStart
    long  returns = (self->GetURLStart());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_delete[] = { &wxluatype_wxTextUrlEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_constructor[] = { &wxluatype_TINTEGER, &wxluatype_wxMouseEvent, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextUrlEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_constructor[1] = {{ wxLua_wxTextUrlEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxTextUrlEvent_constructor }};
//     wxTextUrlEvent(int winid, const wxMouseEvent& evtMouse, long start, long end);
static int LUACALL wxLua_wxTextUrlEvent_constructor(lua_State *L)
{
    // long end
    long end = (long)wxlua_getintegertype(L, 4);
    // long start
    long start = (long)wxlua_getintegertype(L, 3);
    // const wxMouseEvent evtMouse
    const wxMouseEvent * evtMouse = (const wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // int winid
    int winid = (int)wxlua_getintegertype(L, 1);
    // call constructor
    wxTextUrlEvent* returns = new wxTextUrlEvent(winid, *evtMouse, start, end);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextUrlEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextUrlEvent);

    return 1;
}




void wxLua_wxTextUrlEvent_delete_function(void** p)
{
    wxTextUrlEvent* o = (wxTextUrlEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextUrlEvent_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_Clone, 1, NULL },
    { "GetMouseEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetMouseEvent, 1, NULL },
    { "GetURLEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetURLEnd, 1, NULL },
    { "GetURLStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetURLStart, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextUrlEvent_delete, 1, NULL },
    { "wxTextUrlEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextUrlEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextUrlEvent_methodCount = sizeof(wxTextUrlEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextCtrl'
int wxluatype_wxTextCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_AcceptsFocusFromKeyboard[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_AcceptsFocusFromKeyboard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_AcceptsFocusFromKeyboard[1] = {{ wxLua_wxTextCtrl_AcceptsFocusFromKeyboard, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_AcceptsFocusFromKeyboard }};
//     virtual bool AcceptsFocusFromKeyboard() const;
static int LUACALL wxLua_wxTextCtrl_AcceptsFocusFromKeyboard(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call AcceptsFocusFromKeyboard
    bool returns = (self->AcceptsFocusFromKeyboard());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_AdoptAttributesFromHWND[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_AdoptAttributesFromHWND(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_AdoptAttributesFromHWND[1] = {{ wxLua_wxTextCtrl_AdoptAttributesFromHWND, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_AdoptAttributesFromHWND }};
//     virtual void AdoptAttributesFromHWND();
static int LUACALL wxLua_wxTextCtrl_AdoptAttributesFromHWND(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call AdoptAttributesFromHWND
    self->AdoptAttributesFromHWND();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_AppendText[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_AppendText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_AppendText[1] = {{ wxLua_wxTextCtrl_AppendText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_AppendText }};
//     virtual void AppendText(const wxString& text);
static int LUACALL wxLua_wxTextCtrl_AppendText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call AppendText
    self->AppendText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanApplyThemeBorder[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanApplyThemeBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanApplyThemeBorder[1] = {{ wxLua_wxTextCtrl_CanApplyThemeBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanApplyThemeBorder }};
//     virtual bool CanApplyThemeBorder() const;
static int LUACALL wxLua_wxTextCtrl_CanApplyThemeBorder(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanApplyThemeBorder
    bool returns = (self->CanApplyThemeBorder());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanRedo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanRedo[1] = {{ wxLua_wxTextCtrl_CanRedo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanRedo }};
//     virtual bool CanRedo() const;
static int LUACALL wxLua_wxTextCtrl_CanRedo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanRedo
    bool returns = (self->CanRedo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Clear[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Clear[1] = {{ wxLua_wxTextCtrl_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Clear }};
//     virtual void Clear();
static int LUACALL wxLua_wxTextCtrl_Clear(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Command[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_Command(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Command[1] = {{ wxLua_wxTextCtrl_Command, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_Command }};
//     virtual void Command(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_Command(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Command
    self->Command(*event);

    return 0;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Create[] = { &wxluatype_wxTextCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TINTEGER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Create[1] = {{ wxLua_wxTextCtrl_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxTextCtrl_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTextCtrl");
static int LUACALL wxLua_wxTextCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTextCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxTextCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getintegertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_DiscardEdits[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_DiscardEdits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_DiscardEdits[1] = {{ wxLua_wxTextCtrl_DiscardEdits, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_DiscardEdits }};
//     virtual void DiscardEdits();
static int LUACALL wxLua_wxTextCtrl_DiscardEdits(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call DiscardEdits
    self->DiscardEdits();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_EmulateKeyPress[] = { &wxluatype_wxTextCtrl, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_EmulateKeyPress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_EmulateKeyPress[1] = {{ wxLua_wxTextCtrl_EmulateKeyPress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_EmulateKeyPress }};
//     virtual bool EmulateKeyPress(const wxKeyEvent& event);
static int LUACALL wxLua_wxTextCtrl_EmulateKeyPress(lua_State *L)
{
    // const wxKeyEvent event
    const wxKeyEvent * event = (const wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call EmulateKeyPress
    bool returns = (self->EmulateKeyPress(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetInsertionPoint[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetInsertionPoint[1] = {{ wxLua_wxTextCtrl_GetInsertionPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetInsertionPoint }};
//     virtual long GetInsertionPoint() const;
static int LUACALL wxLua_wxTextCtrl_GetInsertionPoint(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetInsertionPoint
    long  returns = (self->GetInsertionPoint());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLastPosition[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLastPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLastPosition[1] = {{ wxLua_wxTextCtrl_GetLastPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetLastPosition }};
//     virtual wxTextPos GetLastPosition() const;
static int LUACALL wxLua_wxTextCtrl_GetLastPosition(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLastPosition
    wxTextPos returns = (self->GetLastPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLayoutDirection[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLayoutDirection[1] = {{ wxLua_wxTextCtrl_GetLayoutDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetLayoutDirection }};
//     virtual wxLayoutDirection GetLayoutDirection() const;
static int LUACALL wxLua_wxTextCtrl_GetLayoutDirection(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLayoutDirection
    wxLayoutDirection returns = (self->GetLayoutDirection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLineLength[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLineLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLineLength[1] = {{ wxLua_wxTextCtrl_GetLineLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_GetLineLength }};
//     virtual int GetLineLength(long lineNo) const;
static int LUACALL wxLua_wxTextCtrl_GetLineLength(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLineLength
    int returns = (self->GetLineLength(lineNo));
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLineText[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLineText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLineText[1] = {{ wxLua_wxTextCtrl_GetLineText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_GetLineText }};
//     virtual wxString GetLineText(long lineNo) const;
static int LUACALL wxLua_wxTextCtrl_GetLineText(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLineText
    wxString returns = (self->GetLineText(lineNo));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetNumberOfLines[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetNumberOfLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetNumberOfLines[1] = {{ wxLua_wxTextCtrl_GetNumberOfLines, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetNumberOfLines }};
//     virtual int GetNumberOfLines() const;
static int LUACALL wxLua_wxTextCtrl_GetNumberOfLines(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetNumberOfLines
    int returns = (self->GetNumberOfLines());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetRange[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetRange[1] = {{ wxLua_wxTextCtrl_GetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_GetRange }};
//     virtual wxString GetRange(long from, long to) const;
static int LUACALL wxLua_wxTextCtrl_GetRange(lua_State *L)
{
    // long to
    long to = (long)wxlua_getintegertype(L, 3);
    // long from
    long from = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetRange
    wxString returns = (self->GetRange(from, to));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetRichVersion[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetRichVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetRichVersion[1] = {{ wxLua_wxTextCtrl_GetRichVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetRichVersion }};
//     int GetRichVersion() const;
static int LUACALL wxLua_wxTextCtrl_GetRichVersion(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetRichVersion
    int returns = (self->GetRichVersion());
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetSelection[] = { &wxluatype_wxTextCtrl, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrl_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetSelection[1] = {{ wxLua_wxTextCtrl_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_GetSelection }};
// %override wxLua_wxTextCtrl_GetSelection
// virtual void GetSelection(long* from, long* to)
static int LUACALL wxLua_wxTextCtrl_GetSelection(lua_State *L)
{
    long to;
    long from;
    // get this
    wxTextCtrl *self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetSelection
    self->GetSelection(&from, &to);
    lua_pushnumber(L, from);
    lua_pushnumber(L, to);
    // return the number of parameters
    return 2;
}



#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetStyle[1] = {{ wxLua_wxTextCtrl_GetStyle, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_GetStyle }};
//     virtual bool GetStyle(long position, wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrl_GetStyle(lua_State *L)
{
    // wxTextAttr style
    wxTextAttr * style = (wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // long position
    long position = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetStyle
    bool returns = (self->GetStyle(position, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetValue[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetValue[1] = {{ wxLua_wxTextCtrl_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetValue }};
//     virtual wxString GetValue() const;
static int LUACALL wxLua_wxTextCtrl_GetValue(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_HideNativeCaret[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_HideNativeCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_HideNativeCaret[1] = {{ wxLua_wxTextCtrl_HideNativeCaret, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_HideNativeCaret }};
//     bool HideNativeCaret();
static int LUACALL wxLua_wxTextCtrl_HideNativeCaret(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call HideNativeCaret
    bool returns = (self->HideNativeCaret());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_HitTest[] = { &wxluatype_wxTextCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_HitTest[1] = {{ wxLua_wxTextCtrl_HitTest, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrl_HitTest }};
// %override wxLua_wxTextCtrl_HitTest
//     wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord *col, wxTextCoord *row) const
static int LUACALL wxLua_wxTextCtrl_HitTest(lua_State *L)
{
    // wxTextCoord row
    wxTextCoord row = wxInvalidTextCoord;
    // wxTextCoord col
    wxTextCoord col = wxInvalidTextCoord;
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = self->HitTest(*pt, &col, &row);
    // push the result number
    lua_pushnumber(L, returns);
    lua_pushnumber(L, row);
    lua_pushnumber(L, col);

    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_HitTestPos[] = { &wxluatype_wxTextCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrl_HitTestPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_HitTestPos[1] = {{ wxLua_wxTextCtrl_HitTestPos, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_HitTestPos }};
// %override wxLua_wxTextCtrl_HitTestPos
//     wxTextCtrlHitTestResult HitTestPos(const wxPoint& pt, long *pos) const
static int LUACALL wxLua_wxTextCtrl_HitTestPos(lua_State *L)
{
    // long pos
    long pos = wxInvalidTextCoord;
    // wxTextCoord col
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = self->HitTest(*pt, &pos);
    // push the result number
    lua_pushnumber(L, returns);
    lua_pushnumber(L, pos);

    return 2;
}


#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsEmpty[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsEmpty[1] = {{ wxLua_wxTextCtrl_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxTextCtrl_IsEmpty(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit1[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsInkEdit1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit1[1] = {{ wxLua_wxTextCtrl_IsInkEdit1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit1 }};
//     bool IsInkEdit() const;
static int LUACALL wxLua_wxTextCtrl_IsInkEdit1(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsInkEdit
    bool returns = (self->IsInkEdit());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsInkEdit(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit[1] = {{ wxLua_wxTextCtrl_IsInkEdit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit }};
//     bool IsInkEdit() const;
static int LUACALL wxLua_wxTextCtrl_IsInkEdit(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsInkEdit
    bool returns = (self->IsInkEdit());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsModified[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsModified[1] = {{ wxLua_wxTextCtrl_IsModified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsModified }};
//     virtual bool IsModified() const;
static int LUACALL wxLua_wxTextCtrl_IsModified(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsModified
    bool returns = (self->IsModified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsRich1[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsRich1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsRich1[1] = {{ wxLua_wxTextCtrl_IsRich1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsRich1 }};
//     bool IsRich() const;
static int LUACALL wxLua_wxTextCtrl_IsRich1(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsRich
    bool returns = (self->IsRich());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsRich[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsRich(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsRich[1] = {{ wxLua_wxTextCtrl_IsRich, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsRich }};
//     bool IsRich() const;
static int LUACALL wxLua_wxTextCtrl_IsRich(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsRich
    bool returns = (self->IsRich());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_MSWCreateContextMenu[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_MSWCreateContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_MSWCreateContextMenu[1] = {{ wxLua_wxTextCtrl_MSWCreateContextMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_MSWCreateContextMenu }};
//     virtual wxMenu *MSWCreateContextMenu();
static int LUACALL wxLua_wxTextCtrl_MSWCreateContextMenu(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call MSWCreateContextMenu
    wxMenu* returns = (wxMenu*)self->MSWCreateContextMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_MarkDirty[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_MarkDirty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_MarkDirty[1] = {{ wxLua_wxTextCtrl_MarkDirty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_MarkDirty }};
//     virtual void MarkDirty();
static int LUACALL wxLua_wxTextCtrl_MarkDirty(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call MarkDirty
    self->MarkDirty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnChar[] = { &wxluatype_wxTextCtrl, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnChar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnChar[1] = {{ wxLua_wxTextCtrl_OnChar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnChar }};
//     void OnChar(wxKeyEvent& event); // Process 'enter' if required
static int LUACALL wxLua_wxTextCtrl_OnChar(lua_State *L)
{
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnChar
    self->OnChar(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnContextMenu[] = { &wxluatype_wxTextCtrl, &wxluatype_wxContextMenuEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnContextMenu[1] = {{ wxLua_wxTextCtrl_OnContextMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnContextMenu }};
//     void OnContextMenu(wxContextMenuEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnContextMenu(lua_State *L)
{
    // wxContextMenuEvent event
    wxContextMenuEvent * event = (wxContextMenuEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxContextMenuEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnContextMenu
    self->OnContextMenu(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnCopy[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnCopy[1] = {{ wxLua_wxTextCtrl_OnCopy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnCopy }};
//     void OnCopy(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnCopy(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnCopy
    self->OnCopy(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnCut[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnCut[1] = {{ wxLua_wxTextCtrl_OnCut, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnCut }};
//     void OnCut(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnCut(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnCut
    self->OnCut(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnDelete[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnDelete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnDelete[1] = {{ wxLua_wxTextCtrl_OnDelete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnDelete }};
//     void OnDelete(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnDelete(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnDelete
    self->OnDelete(*event);

    return 0;
}


#if (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnDropFiles[] = { &wxluatype_wxTextCtrl, &wxluatype_wxDropFilesEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnDropFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnDropFiles[1] = {{ wxLua_wxTextCtrl_OnDropFiles, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnDropFiles }};
//     void OnDropFiles(wxDropFilesEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnDropFiles(lua_State *L)
{
    // wxDropFilesEvent event
    wxDropFilesEvent * event = (wxDropFilesEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDropFilesEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnDropFiles
    self->OnDropFiles(*event);

    return 0;
}

#endif // (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnPaste[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnPaste[1] = {{ wxLua_wxTextCtrl_OnPaste, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnPaste }};
//     void OnPaste(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnPaste(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnPaste
    self->OnPaste(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnRedo[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnRedo[1] = {{ wxLua_wxTextCtrl_OnRedo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnRedo }};
//     void OnRedo(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnRedo(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnRedo
    self->OnRedo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnSelectAll[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnSelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnSelectAll[1] = {{ wxLua_wxTextCtrl_OnSelectAll, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnSelectAll }};
//     void OnSelectAll(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnSelectAll(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnSelectAll
    self->OnSelectAll(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnSetFocus[] = { &wxluatype_wxTextCtrl, &wxluatype_wxFocusEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnSetFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnSetFocus[1] = {{ wxLua_wxTextCtrl_OnSetFocus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnSetFocus }};
//     void OnSetFocus(wxFocusEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnSetFocus(lua_State *L)
{
    // wxFocusEvent event
    wxFocusEvent * event = (wxFocusEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFocusEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnSetFocus
    self->OnSetFocus(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUndo[] = { &wxluatype_wxTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUndo[1] = {{ wxLua_wxTextCtrl_OnUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUndo }};
//     void OnUndo(wxCommandEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUndo(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUndo
    self->OnUndo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateCopy[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateCopy[1] = {{ wxLua_wxTextCtrl_OnUpdateCopy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateCopy }};
//     void OnUpdateCopy(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateCopy(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateCopy
    self->OnUpdateCopy(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateCut[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateCut[1] = {{ wxLua_wxTextCtrl_OnUpdateCut, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateCut }};
//     void OnUpdateCut(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateCut(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateCut
    self->OnUpdateCut(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateDelete[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateDelete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateDelete[1] = {{ wxLua_wxTextCtrl_OnUpdateDelete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateDelete }};
//     void OnUpdateDelete(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateDelete(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateDelete
    self->OnUpdateDelete(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdatePaste[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdatePaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdatePaste[1] = {{ wxLua_wxTextCtrl_OnUpdatePaste, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdatePaste }};
//     void OnUpdatePaste(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdatePaste(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdatePaste
    self->OnUpdatePaste(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateRedo[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateRedo[1] = {{ wxLua_wxTextCtrl_OnUpdateRedo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateRedo }};
//     void OnUpdateRedo(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateRedo(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateRedo
    self->OnUpdateRedo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateSelectAll[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateSelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateSelectAll[1] = {{ wxLua_wxTextCtrl_OnUpdateSelectAll, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateSelectAll }};
//     void OnUpdateSelectAll(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateSelectAll(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateSelectAll
    self->OnUpdateSelectAll(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateUndo[] = { &wxluatype_wxTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_OnUpdateUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_OnUpdateUndo[1] = {{ wxLua_wxTextCtrl_OnUpdateUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_OnUpdateUndo }};
//     void OnUpdateUndo(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxTextCtrl_OnUpdateUndo(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call OnUpdateUndo
    self->OnUpdateUndo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_PositionToXY[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTextCtrl_PositionToXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_PositionToXY[1] = {{ wxLua_wxTextCtrl_PositionToXY, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrl_PositionToXY }};
// %override wxLua_wxTextCtrl_PositionToXY
// bool PositionToXY(long pos, long *x, long *y) const
static int LUACALL wxLua_wxTextCtrl_PositionToXY(lua_State *L)
{
    long y;
    long x;
    // long pos
    long pos = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl *self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call PositionToXY
    bool returns = self->PositionToXY(pos, &x, &y);
    // push the result number
    lua_pushboolean(L, returns);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Redo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Redo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Redo[1] = {{ wxLua_wxTextCtrl_Redo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Redo }};
//     virtual void Redo();
static int LUACALL wxLua_wxTextCtrl_Redo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Redo
    self->Redo();

    return 0;
}


#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetBackgroundColour[] = { &wxluatype_wxTextCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextCtrl_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetBackgroundColour[1] = {{ wxLua_wxTextCtrl_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetBackgroundColour }};
//     virtual bool SetBackgroundColour(const wxColour& colour);
static int LUACALL wxLua_wxTextCtrl_SetBackgroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetBackgroundColour
    bool returns = (self->SetBackgroundColour(*colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetDefaultStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_SetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetDefaultStyle[1] = {{ wxLua_wxTextCtrl_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetDefaultStyle }};
//     virtual bool SetDefaultStyle(const wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrl_SetDefaultStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_DRAG_AND_DROP && wxUSE_RICHEDIT)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetDropTarget[] = { &wxluatype_wxTextCtrl, &wxluatype_wxDropTarget, NULL };
static int LUACALL wxLua_wxTextCtrl_SetDropTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetDropTarget[1] = {{ wxLua_wxTextCtrl_SetDropTarget, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetDropTarget }};
//     virtual void SetDropTarget(wxDropTarget *dropTarget);
static int LUACALL wxLua_wxTextCtrl_SetDropTarget(lua_State *L)
{
    // wxDropTarget dropTarget
    wxDropTarget * dropTarget = (wxDropTarget *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDropTarget);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetDropTarget
    self->SetDropTarget(dropTarget);

    return 0;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_DRAG_AND_DROP && wxUSE_RICHEDIT)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetFont[] = { &wxluatype_wxTextCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxTextCtrl_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetFont[1] = {{ wxLua_wxTextCtrl_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetFont }};
//     virtual bool SetFont(const wxFont& font);
static int LUACALL wxLua_wxTextCtrl_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetFont
    bool returns = (self->SetFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxFont)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetForegroundColour[] = { &wxluatype_wxTextCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextCtrl_SetForegroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetForegroundColour[1] = {{ wxLua_wxTextCtrl_SetForegroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetForegroundColour }};
//     virtual bool SetForegroundColour(const wxColour& colour);
static int LUACALL wxLua_wxTextCtrl_SetForegroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetForegroundColour
    bool returns = (self->SetForegroundColour(*colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPointEnd[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_SetInsertionPointEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPointEnd[1] = {{ wxLua_wxTextCtrl_SetInsertionPointEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPointEnd }};
//     virtual void SetInsertionPointEnd();
static int LUACALL wxLua_wxTextCtrl_SetInsertionPointEnd(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetInsertionPointEnd
    self->SetInsertionPointEnd();

    return 0;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetLayoutDirection[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetLayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetLayoutDirection[1] = {{ wxLua_wxTextCtrl_SetLayoutDirection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetLayoutDirection }};
//     virtual void SetLayoutDirection(wxLayoutDirection dir);
static int LUACALL wxLua_wxTextCtrl_SetLayoutDirection(lua_State *L)
{
    // wxLayoutDirection dir
    wxLayoutDirection dir = (wxLayoutDirection)wxlua_getenumtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetLayoutDirection
    self->SetLayoutDirection(dir);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetMaxLength[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetMaxLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetMaxLength[1] = {{ wxLua_wxTextCtrl_SetMaxLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetMaxLength }};
//     virtual void SetMaxLength(unsigned long len);
static int LUACALL wxLua_wxTextCtrl_SetMaxLength(lua_State *L)
{
    // unsigned long len
    unsigned long len = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetMaxLength
    self->SetMaxLength(len);

    return 0;
}


#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetStyle[1] = {{ wxLua_wxTextCtrl_SetStyle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrl_SetStyle }};
//     virtual bool SetStyle(long start, long end, const wxTextAttr& style);
static int LUACALL wxLua_wxTextCtrl_SetStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttr);
    // long end
    long end = (long)wxlua_getintegertype(L, 3);
    // long start
    long start = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(start, end, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetWindowStyleFlag[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetWindowStyleFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetWindowStyleFlag[1] = {{ wxLua_wxTextCtrl_SetWindowStyleFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetWindowStyleFlag }};
//     virtual void SetWindowStyleFlag(long style);
static int LUACALL wxLua_wxTextCtrl_SetWindowStyleFlag(lua_State *L)
{
    // long style
    long style = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetWindowStyleFlag
    self->SetWindowStyleFlag(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_ShowNativeCaret[] = { &wxluatype_wxTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextCtrl_ShowNativeCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_ShowNativeCaret[1] = {{ wxLua_wxTextCtrl_ShowNativeCaret, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxTextCtrl_ShowNativeCaret }};
//     bool ShowNativeCaret(bool show = true);
static int LUACALL wxLua_wxTextCtrl_ShowNativeCaret(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call ShowNativeCaret
    bool returns = (self->ShowNativeCaret(show));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_ShowPosition[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_ShowPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_ShowPosition[1] = {{ wxLua_wxTextCtrl_ShowPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_ShowPosition }};
//     virtual void ShowPosition(long pos);
static int LUACALL wxLua_wxTextCtrl_ShowPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call ShowPosition
    self->ShowPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_WriteText[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_WriteText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_WriteText[1] = {{ wxLua_wxTextCtrl_WriteText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_WriteText }};
//     virtual void WriteText(const wxString& text);
static int LUACALL wxLua_wxTextCtrl_WriteText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call WriteText
    self->WriteText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_XYToPosition[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_XYToPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_XYToPosition[1] = {{ wxLua_wxTextCtrl_XYToPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_XYToPosition }};
//     virtual long XYToPosition(long x, long y) const;
static int LUACALL wxLua_wxTextCtrl_XYToPosition(lua_State *L)
{
    // long y
    long y = (long)wxlua_getintegertype(L, 3);
    // long x
    long x = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call XYToPosition
    long  returns = (self->XYToPosition(x, y));
    // push the result integer
    lua_pushinteger(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TINTEGER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor1[1] = {{ wxLua_wxTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxTextCtrl_constructor1 }};
//     wxTextCtrl(wxWindow *parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTextCtrl");
static int LUACALL wxLua_wxTextCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTextCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxTextCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getintegertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTextCtrl* returns = new wxTextCtrl(parent, id, value, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static int LUACALL wxLua_wxTextCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor[1] = {{ wxLua_wxTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextCtrl();
static int LUACALL wxLua_wxTextCtrl_constructor(lua_State *L)
{
    // call constructor
    wxTextCtrl* returns = new wxTextCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}




#if ((!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit_overload[] =
{

#if (!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrl_IsInkEdit1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit1 },
#endif // (!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT)
    { wxLua_wxTextCtrl_IsInkEdit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsInkEdit },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT)
};
static int s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit_overload_count = sizeof(s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit_overload)/sizeof(wxLuaBindCFunc);

#endif // ((!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT))

#if ((!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsRich_overload[] =
{

#if (!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrl_IsRich1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsRich1 },
#endif // (!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)
    { wxLua_wxTextCtrl_IsRich, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsRich },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)
};
static int s_wxluafunc_wxLua_wxTextCtrl_IsRich_overload_count = sizeof(s_wxluafunc_wxLua_wxTextCtrl_IsRich_overload)/sizeof(wxLuaBindCFunc);

#endif // ((!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT))

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxTextCtrl_constructor1 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTextCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTextCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

void wxLua_wxTextCtrl_delete_function(void** p)
{
    wxTextCtrl* o = (wxTextCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextCtrl_methods[] = {
    { "AcceptsFocusFromKeyboard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_AcceptsFocusFromKeyboard, 1, NULL },
    { "AdoptAttributesFromHWND", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_AdoptAttributesFromHWND, 1, NULL },
    { "AppendText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_AppendText, 1, NULL },
    { "CanApplyThemeBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanApplyThemeBorder, 1, NULL },
    { "CanRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanRedo, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Clear, 1, NULL },
    { "Command", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Command, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "DiscardEdits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_DiscardEdits, 1, NULL },
    { "EmulateKeyPress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_EmulateKeyPress, 1, NULL },
    { "GetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetInsertionPoint, 1, NULL },
    { "GetLastPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLastPosition, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
    { "GetLayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLayoutDirection, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

    { "GetLineLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLineLength, 1, NULL },
    { "GetLineText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLineText, 1, NULL },
    { "GetNumberOfLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetNumberOfLines, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetRange, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)
    { "GetRichVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetRichVersion, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)

    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetSelection, 1, NULL },

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetStyle, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetValue, 1, NULL },
    { "HideNativeCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_HideNativeCaret, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_HitTest, 1, NULL },
    { "HitTestPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_HitTestPos, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsEmpty, 1, NULL },

#if ((!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT))
    { "IsInkEdit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit_overload, s_wxluafunc_wxLua_wxTextCtrl_IsInkEdit_overload_count, 0 },
#endif // ((!wxUSE_INKEDIT || !wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INKEDIT && wxUSE_RICHEDIT))

    { "IsModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsModified, 1, NULL },

#if ((!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT))
    { "IsRich", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsRich_overload, s_wxluafunc_wxLua_wxTextCtrl_IsRich_overload_count, 0 },
#endif // ((!wxUSE_RICHEDIT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT))

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "MSWCreateContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_MSWCreateContextMenu, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "MarkDirty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_MarkDirty, 1, NULL },
    { "OnChar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnChar, 1, NULL },
    { "OnContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnContextMenu, 1, NULL },
    { "OnCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnCopy, 1, NULL },
    { "OnCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnCut, 1, NULL },
    { "OnDelete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnDelete, 1, NULL },

#if (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "OnDropFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnDropFiles, 1, NULL },
#endif // (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "OnPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnPaste, 1, NULL },
    { "OnRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnRedo, 1, NULL },
    { "OnSelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnSelectAll, 1, NULL },
    { "OnSetFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnSetFocus, 1, NULL },
    { "OnUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUndo, 1, NULL },
    { "OnUpdateCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateCopy, 1, NULL },
    { "OnUpdateCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateCut, 1, NULL },
    { "OnUpdateDelete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateDelete, 1, NULL },
    { "OnUpdatePaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdatePaste, 1, NULL },
    { "OnUpdateRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateRedo, 1, NULL },
    { "OnUpdateSelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateSelectAll, 1, NULL },
    { "OnUpdateUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_OnUpdateUndo, 1, NULL },
    { "PositionToXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_PositionToXY, 1, NULL },
    { "Redo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Redo, 1, NULL },

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetBackgroundColour, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetDefaultStyle, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_DRAG_AND_DROP && wxUSE_RICHEDIT)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "SetDropTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetDropTarget, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_DRAG_AND_DROP && wxUSE_RICHEDIT)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetFont, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxFont)

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)
    { "SetForegroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetForegroundColour, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxColourPenBrush)

    { "SetInsertionPointEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPointEnd, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)
    { "SetLayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetLayoutDirection, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_INTL)

    { "SetMaxLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetMaxLength, 1, NULL },

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetStyle, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxUSE_RICHEDIT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetWindowStyleFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetWindowStyleFlag, 1, NULL },
    { "ShowNativeCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_ShowNativeCaret, 1, NULL },
    { "ShowPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_ShowPosition, 1, NULL },
    { "WriteText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_WriteText, 1, NULL },
    { "XYToPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_XYToPosition, 1, NULL },

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "wxTextCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextCtrl_constructor_overload, s_wxluafunc_wxLua_wxTextCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { 0, 0, 0, 0 },
};

int wxTextCtrl_methodCount = sizeof(wxTextCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL

